
==================== FINAL INTERFACE ====================
2018-09-15 03:57:23.124197924 UTC

interface main@main:Main 8002
  interface hash: 56ec5dbc5a2abdd0a6f46dc15fcc2441
  ABI hash: c901cf36cc67472993f752132bf9e5c1
  export-list hash: e80f747167b8761a53724a3b0e3842db
  orphan hash: 754fe08e09706055fb4406cae3c71a29
  flag hash: 4842ade21a201650e1cb7b27abafe6d5
  sig of: Nothing
  used TH splices: True
  where
exports:
  Main.main
module dependencies: Queue
package dependencies: GLURaw-2.0.0.3@GLURaw-2.0.0.3-HbkTOYe7GSm9IoqTwuffLD
                      GLUT-2.7.0.12@GLUT-2.7.0.12-EVcPlSVbeKMGSQqDJn74mS
                      ObjectName-1.1.0.1@ObjectName-1.1.0.1-EiFOWjUQWWuLyOhtrmuIWX
                      OpenGL-3.0.2.0@OpenGL-3.0.2.0-KHOzPPeDujTAmCOX5KfutQ
                      OpenGLRaw-3.2.7.0@OpenGLRaw-3.2.7.0-L8uIfV1Q6wyDPFA3cL20qq
                      StateVar-1.1.0.4@StateVar-1.1.0.4-5dJbnTVECtEAhfJXPZKdbO
                      adjunctions-4.3@adjunctions-4.3-A5jfd1yrmaY4DRMJuiquBp
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw
                      binary-0.8.3.0@binary-0.8.3.0
                      bmp-1.2.6.3@bmp-1.2.6.3-43OLkH0uuwm831pBFpx2PZ
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      call-stack-0.1.0@call-stack-0.1.0-FYVrCPXGP9EGAuTW32963O
                      comonad-5.0.2@comonad-5.0.2-Fq9Xy9jdx6uIyJZn00E6Yc
                      containers-0.5.7.1@containers-0.5.7.1
                      contravariant-1.4@contravariant-1.4-29zF0Im431177ovfbHYCGv
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      distributive-0.5.3@distributive-0.5.3-IX4kyVcHAyoH4uFYrsjY1R
                      exceptions-0.8.3@exceptions-0.8.3-ADEDRATtUrMK1JW4zMQ9U
                      fixed-0.2.1.1@fixed-0.2.1.1-8Jr82l0kss5Gr4nEevmXlZ
                      free-4.12.4@free-4.12.4-C2gBQV0m8J42HxqSLTFyVx
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      gloss-1.11.1.1@gloss-1.11.1.1-2LNUnZrdkMKHLyfv0zr1U9
                      gloss-rendering-1.11.1.1@gloss-rendering-1.11.1.1-B4gt3hn7UXc23k8ot2khBK
                      half-0.2.2.3@half-0.2.2.3-GHJ372Ls7FBA3PAGtGHfOR
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1
                      kan-extensions-5.0.2@kan-extensions-5.0.2-8LTJJ1zQJWB7SfewWXUuqX
                      lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      prelude-extras-0.4.0.3@prelude-extras-0.4.0.3-BhL9U5k7NtGJn1itwIHt2Y
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      profunctors-5.2.1@profunctors-5.2.1-Ga89Nyw0d7LBEIoX4AZ6gT
                      reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4
                      semigroupoids-5.2.1@semigroupoids-5.2.1-Db8txM8kTsI6Y49CY6g5Jn
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      th-abstraction-0.2.6.0@th-abstraction-0.2.6.0-HRFJgpoqs5HJ5LgHnjmMhQ
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         gloss-rendering-1.11.1.1@gloss-rendering-1.11.1.1-B4gt3hn7UXc23k8ot2khBK:Graphics.Gloss.Internals.Data.Picture
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4:Data.Reflection
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: adjunctions-4.3@adjunctions-4.3-A5jfd1yrmaY4DRMJuiquBp:Data.Functor.Rep
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Biff
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Clown
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Fix
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Flip
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Join
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Joker
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Product
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Sum
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Tannen
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Wrapped
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         kan-extensions-5.0.2@kan-extensions-5.0.2-8LTJJ1zQJWB7SfewWXUuqX:Data.Functor.Day
                         kan-extensions-5.0.2@kan-extensions-5.0.2-8LTJJ1zQJWB7SfewWXUuqX:Data.Functor.Yoneda
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.At
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Internal.Indexed
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Reified
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Tuple
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Wrapped
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Zoom
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         profunctors-5.2.1@profunctors-5.2.1-Ga89Nyw0d7LBEIoX4AZ6gT:Data.Profunctor.Rep
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         th-abstraction-0.2.6.0@th-abstraction-0.2.6.0-HRFJgpoqs5HJ5LgHnjmMhQ:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Function 7aca86bfbd92366def5f260e30cb2628
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 20d4ffbee41965d03d6a989425473dc4
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base d432f6875983131473086af8cb290590
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  gloss-1.11.1.1@gloss-1.11.1.1-2LNUnZrdkMKHLyfv0zr1U9:Graphics.Gloss aac2a7a6f4244dd2b10b9447178db7c3
import  -/  gloss-1.11.1.1@gloss-1.11.1.1-2LNUnZrdkMKHLyfv0zr1U9:Graphics.Gloss.Data.Color 76f32a2ff878a0ef8baaa10e6d6cbe58
import  -/  gloss-1.11.1.1@gloss-1.11.1.1-2LNUnZrdkMKHLyfv0zr1U9:Graphics.Gloss.Data.Display 339979b73cd638ccd2a42d4e5e0c9c7f
import  -/  gloss-1.11.1.1@gloss-1.11.1.1-2LNUnZrdkMKHLyfv0zr1U9:Graphics.Gloss.Data.Picture 370719b48621af48a17c64b0d7fff74e
import  -/  gloss-1.11.1.1@gloss-1.11.1.1-2LNUnZrdkMKHLyfv0zr1U9:Graphics.Gloss.Interface.Pure.Game 2b3b4ce0252ba4abb61a529e858127c3
import  -/  gloss-1.11.1.1@gloss-1.11.1.1-2LNUnZrdkMKHLyfv0zr1U9:Graphics.Gloss.Internals.Interface.Backend.Types 90ff26dff6fe1694a1d2fc47cd3edcf4
import  -/  gloss-1.11.1.1@gloss-1.11.1.1-2LNUnZrdkMKHLyfv0zr1U9:Graphics.Gloss.Internals.Interface.Event 9b95850e5f54e7486818f2f45faf5aab
import  -/  gloss-rendering-1.11.1.1@gloss-rendering-1.11.1.1-B4gt3hn7UXc23k8ot2khBK:Graphics.Gloss.Internals.Data.Color d695dd82368a29458c3a1764f37cf9b6
import  -/  gloss-rendering-1.11.1.1@gloss-rendering-1.11.1.1-B4gt3hn7UXc23k8ot2khBK:Graphics.Gloss.Internals.Data.Picture a382316472c4bc0564b43e7a0b33b778
import  -/  lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens 51c282815697462fb4c0814abcb89573
import  -/  lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Getter fdd01e67774984c7af2603df9b4d0e7c
import  -/  lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Setter 96baa0a2437ca0bcbb1299d650008a1c
import  -/  lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.TH dd5cbbfb5b956aaee3621956bb8a2054
import  -/  lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Tuple b6b7bc07dbd1b9961ab00116c03f82e3
import  -/  lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Type d47225c91186c48f18c996385b68fd25
import  -/  Queue 7852a41f1e75509f25e9fd5c4e19bd0a
  exports: 47ea2529f54a5557750f0e0393466d7f
  Queue 0dd48792c0f3afd967354dc913d76db1
  emptyQueue fd843067b1ca61007ccf7403f7d671ec
  pop 15cd40dd3cf1096b76c6c14bc2dd67ff
  push bf8023d4a56d40ea34febb766c29dedd
6b7d09e1353386b812125bfcdfd50080
  $fEqDimensionalAttributes ::
    GHC.Classes.Eq Main.DimensionalAttributes
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.DimensionalAttributes
                  Main.$fEqDimensionalAttributes_$c==
                  Main.$fEqDimensionalAttributes_$c/= -}
6b7d09e1353386b812125bfcdfd50080
  $fEqDimensionalAttributes_$c/= ::
    Main.DimensionalAttributes
    -> Main.DimensionalAttributes -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.DimensionalAttributes)
                   (b :: Main.DimensionalAttributes) ->
                 case Main.$fEqDimensionalAttributes_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
6b7d09e1353386b812125bfcdfd50080
  $fEqDimensionalAttributes_$c== ::
    Main.DimensionalAttributes
    -> Main.DimensionalAttributes -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Main.DimensionalAttributes)
                   (ds1 :: Main.DimensionalAttributes) ->
                 case ds of wild {
                   Main.Sphere a1
                   -> case ds1 of wild1 {
                        Main.Sphere b1 -> GHC.Classes.eqFloat a1 b1
                        Main.Rectangle ipv ipv1 -> GHC.Types.False }
                   Main.Rectangle a1 a2
                   -> case ds1 of wild1 {
                        Main.Sphere ipv -> GHC.Types.False
                        Main.Rectangle b1 b2
                        -> case a1 of wild2 { GHC.Types.F# x ->
                           case b1 of wild3 { GHC.Types.F# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.eqFloat# x y) of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.eqFloat a2 b2 } } } } }) -}
84e551aa6eb363bfbced78fd1d4e3f2c
  $fEqDisplayableShape :: GHC.Classes.Eq Main.DisplayableShape
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.DisplayableShape
                  Main.$fEqDisplayableShape_$c==
                  Main.$fEqDisplayableShape_$c/= -}
84e551aa6eb363bfbced78fd1d4e3f2c
  $fEqDisplayableShape_$c/= ::
    Main.DisplayableShape -> Main.DisplayableShape -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(SLLL)L)LL),1*U(1*U(1*U(U,U,U,U),1*U),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)><S(S(S(SLLL)L)LL),1*U(1*U(1*U(U,U,U,U),1*U),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.DisplayableShape) (b :: Main.DisplayableShape) ->
                 case Main.$fEqDisplayableShape_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
84e551aa6eb363bfbced78fd1d4e3f2c
  $fEqDisplayableShape_$c== ::
    Main.DisplayableShape -> Main.DisplayableShape -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(SLLL)L)LL),1*U(1*U(1*U(U,U,U,U),1*U),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)><S(S(S(SLLL)L)LL),1*U(1*U(1*U(U,U,U,U),1*U),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.DisplayableShape) (w1 :: Main.DisplayableShape) ->
                 case w of ww { Main.DisplayableShape ww1 ww2 ww3 ->
                 case ww1 of ww4 { Main.VisualAttributes ww5 ww6 ->
                 case ww5 of ww7 { Graphics.Gloss.Internals.Data.Color.RGBA ww8 ww9 ww10 ww11 ->
                 case w1 of ww12 { Main.DisplayableShape ww13 ww14 ww15 ->
                 case ww13 of ww16 { Main.VisualAttributes ww17 ww18 ->
                 case ww17 of ww19 { Graphics.Gloss.Internals.Data.Color.RGBA ww20 ww21 ww22 ww23 ->
                 Main.$w$c==
                   ww8
                   ww9
                   ww10
                   ww11
                   ww6
                   ww2
                   ww3
                   ww20
                   ww21
                   ww22
                   ww23
                   ww18
                   ww14
                   ww15 } } } } } }) -}
8130e0984cebc0bbef920349424ce391
  $fEqGameEntityAttributes ::
    GHC.Classes.Eq Main.GameEntityAttributes
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.GameEntityAttributes
                  Main.$fEqGameEntityAttributes_$c==
                  Main.$fEqGameEntityAttributes_$c/= -}
8130e0984cebc0bbef920349424ce391
  $fEqGameEntityAttributes_$c/= ::
    Main.GameEntityAttributes
    -> Main.GameEntityAttributes -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))><S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.GameEntityAttributes)
                   (b :: Main.GameEntityAttributes) ->
                 case Main.$fEqGameEntityAttributes_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
8130e0984cebc0bbef920349424ce391
  $fEqGameEntityAttributes_$c== ::
    Main.GameEntityAttributes
    -> Main.GameEntityAttributes -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))><S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.GameEntityAttributes)
                   (w1 :: Main.GameEntityAttributes) ->
                 case w of ww { Main.GameEntityAttributes ww1 ww2 ww3 ->
                 case ww1 of ww4 { (,) ww5 ww6 ->
                 case ww5 of ww7 { GHC.Types.F# ww8 ->
                 case w1 of ww9 { Main.GameEntityAttributes ww10 ww11 ww12 ->
                 case ww10 of ww13 { (,) ww14 ww15 ->
                 case ww14 of ww16 { GHC.Types.F# ww17 ->
                 Main.$w$c==1 ww8 ww6 ww2 ww3 ww17 ww15 ww11 ww12 } } } } } }) -}
6ca2b488f20758f44f464b5a5ac1465d
  $fEqVisualAttributes :: GHC.Classes.Eq Main.VisualAttributes
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.VisualAttributes
                  Main.$fEqVisualAttributes_$c==
                  Main.$fEqVisualAttributes_$c/= -}
6ca2b488f20758f44f464b5a5ac1465d
  $fEqVisualAttributes_$c/= ::
    Main.VisualAttributes -> Main.VisualAttributes -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SLLL)L),1*U(1*U(U,U,U,U),1*U)><S(S(SLLL)L),1*U(1*U(U,U,U,U),1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.VisualAttributes) (b :: Main.VisualAttributes) ->
                 case Main.$fEqVisualAttributes_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
6ca2b488f20758f44f464b5a5ac1465d
  $fEqVisualAttributes_$c== ::
    Main.VisualAttributes -> Main.VisualAttributes -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SLLL)L),1*U(1*U(U,U,U,U),1*U)><S(S(SLLL)L),1*U(1*U(U,U,U,U),1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.VisualAttributes) (w1 :: Main.VisualAttributes) ->
                 case w of ww { Main.VisualAttributes ww1 ww2 ->
                 case ww1 of ww3 { Graphics.Gloss.Internals.Data.Color.RGBA ww4 ww5 ww6 ww7 ->
                 case w1 of ww8 { Main.VisualAttributes ww9 ww10 ->
                 case ww9 of ww11 { Graphics.Gloss.Internals.Data.Color.RGBA ww12 ww13 ww14 ww15 ->
                 Main.$w$c==2
                   ww4
                   ww5
                   ww6
                   ww7
                   ww2
                   ww12
                   ww13
                   ww14
                   ww15
                   ww10 } } } }) -}
6b7d09e1353386b812125bfcdfd50080
  $fOrdDimensionalAttributes ::
    GHC.Classes.Ord Main.DimensionalAttributes
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.DimensionalAttributes
                  Main.$fEqDimensionalAttributes
                  Main.$fOrdDimensionalAttributes_$ccompare
                  Main.$fOrdDimensionalAttributes_$c<
                  Main.$fOrdDimensionalAttributes_$c<=
                  Main.$fOrdDimensionalAttributes_$c>
                  Main.$fOrdDimensionalAttributes_$c>=
                  Main.$fOrdDimensionalAttributes_$cmax
                  Main.$fOrdDimensionalAttributes_$cmin -}
6b7d09e1353386b812125bfcdfd50080
  $fOrdDimensionalAttributes_$c< ::
    Main.DimensionalAttributes
    -> Main.DimensionalAttributes -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Main.DimensionalAttributes)
                   (b :: Main.DimensionalAttributes) ->
                 case a of wild {
                   Main.Sphere a1
                   -> case b of wild1 {
                        Main.Sphere b1 -> GHC.Classes.$fOrdFloat_$c< a1 b1
                        Main.Rectangle ipv ipv1 -> GHC.Types.True }
                   Main.Rectangle a1 a2
                   -> case b of wild1 {
                        Main.Sphere ipv -> GHC.Types.False
                        Main.Rectangle b1 b2
                        -> case a1 of wild2 { GHC.Types.F# x ->
                           case b1 of wild3 { GHC.Types.F# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.ltFloat# x y) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.eqFloat# x y) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True -> GHC.Classes.$fOrdFloat_$c< a2 b2 }
                             GHC.Types.True -> GHC.Types.True } } } } }) -}
6b7d09e1353386b812125bfcdfd50080
  $fOrdDimensionalAttributes_$c<= ::
    Main.DimensionalAttributes
    -> Main.DimensionalAttributes -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Main.DimensionalAttributes)
                   (b :: Main.DimensionalAttributes) ->
                 case a of wild {
                   Main.Sphere a1
                   -> case b of wild1 {
                        Main.Sphere b1 -> GHC.Classes.$fOrdFloat_$c<= a1 b1
                        Main.Rectangle ipv ipv1 -> GHC.Types.True }
                   Main.Rectangle a1 a2
                   -> case b of wild1 {
                        Main.Sphere ipv -> GHC.Types.False
                        Main.Rectangle b1 b2
                        -> case a1 of wild2 { GHC.Types.F# x ->
                           case b1 of wild3 { GHC.Types.F# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.ltFloat# x y) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.eqFloat# x y) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True -> GHC.Classes.$fOrdFloat_$c<= a2 b2 }
                             GHC.Types.True -> GHC.Types.True } } } } }) -}
6b7d09e1353386b812125bfcdfd50080
  $fOrdDimensionalAttributes_$c> ::
    Main.DimensionalAttributes
    -> Main.DimensionalAttributes -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Main.DimensionalAttributes)
                   (b :: Main.DimensionalAttributes) ->
                 case a of wild {
                   Main.Sphere a1
                   -> case b of wild1 {
                        Main.Sphere b1 -> GHC.Classes.$fOrdFloat_$c> a1 b1
                        Main.Rectangle ipv ipv1 -> GHC.Types.False }
                   Main.Rectangle a1 a2
                   -> case b of wild1 {
                        Main.Sphere ipv -> GHC.Types.True
                        Main.Rectangle b1 b2
                        -> case a1 of wild2 { GHC.Types.F# x ->
                           case b1 of wild3 { GHC.Types.F# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.ltFloat# x y) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.eqFloat# x y) of wild5 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Classes.$fOrdFloat_$c> a2 b2 }
                             GHC.Types.True -> GHC.Types.False } } } } }) -}
6b7d09e1353386b812125bfcdfd50080
  $fOrdDimensionalAttributes_$c>= ::
    Main.DimensionalAttributes
    -> Main.DimensionalAttributes -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Main.DimensionalAttributes)
                   (b :: Main.DimensionalAttributes) ->
                 case a of wild {
                   Main.Sphere a1
                   -> case b of wild1 {
                        Main.Sphere b1 -> GHC.Classes.$fOrdFloat_$c>= a1 b1
                        Main.Rectangle ipv ipv1 -> GHC.Types.False }
                   Main.Rectangle a1 a2
                   -> case b of wild1 {
                        Main.Sphere ipv -> GHC.Types.True
                        Main.Rectangle b1 b2
                        -> case a1 of wild2 { GHC.Types.F# x ->
                           case b1 of wild3 { GHC.Types.F# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.ltFloat# x y) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.eqFloat# x y) of wild5 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Classes.$fOrdFloat_$c>= a2 b2 }
                             GHC.Types.True -> GHC.Types.False } } } } }) -}
6b7d09e1353386b812125bfcdfd50080
  $fOrdDimensionalAttributes_$ccompare ::
    Main.DimensionalAttributes
    -> Main.DimensionalAttributes -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Main.DimensionalAttributes)
                   (b :: Main.DimensionalAttributes) ->
                 case a of wild {
                   Main.Sphere a1
                   -> case b of wild1 {
                        Main.Sphere b1 -> GHC.Classes.$fOrdFloat_$ccompare a1 b1
                        Main.Rectangle ipv ipv1 -> GHC.Types.LT }
                   Main.Rectangle a1 a2
                   -> case b of wild1 {
                        Main.Sphere ipv -> GHC.Types.GT
                        Main.Rectangle b1 b2
                        -> case a1 of wild2 { GHC.Types.F# x ->
                           case b1 of wild3 { GHC.Types.F# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.ltFloat# x y) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.eqFloat# x y) of wild5 {
                                  GHC.Types.False -> GHC.Types.GT
                                  GHC.Types.True -> GHC.Classes.$fOrdFloat_$ccompare a2 b2 }
                             GHC.Types.True -> GHC.Types.LT } } } } }) -}
6b7d09e1353386b812125bfcdfd50080
  $fOrdDimensionalAttributes_$cmax ::
    Main.DimensionalAttributes
    -> Main.DimensionalAttributes -> Main.DimensionalAttributes
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Main.DimensionalAttributes)
                   (y :: Main.DimensionalAttributes) ->
                 case Main.$fOrdDimensionalAttributes_$c<= x y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
6b7d09e1353386b812125bfcdfd50080
  $fOrdDimensionalAttributes_$cmin ::
    Main.DimensionalAttributes
    -> Main.DimensionalAttributes -> Main.DimensionalAttributes
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Main.DimensionalAttributes)
                   (y :: Main.DimensionalAttributes) ->
                 case Main.$fOrdDimensionalAttributes_$c<= x y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
84e551aa6eb363bfbced78fd1d4e3f2c
  $fOrdDisplayableShape :: GHC.Classes.Ord Main.DisplayableShape
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.DisplayableShape
                  Main.$fEqDisplayableShape
                  Main.$fOrdDisplayableShape_$ccompare1
                  Main.$fOrdDisplayableShape_$c<
                  Main.$fOrdDisplayableShape_$c<=
                  Main.$fOrdDisplayableShape_$c>
                  Main.$fOrdDisplayableShape_$c>=
                  Main.$fOrdDisplayableShape_$cmax
                  Main.$fOrdDisplayableShape_$cmin -}
84e551aa6eb363bfbced78fd1d4e3f2c
  $fOrdDisplayableShape_$c< ::
    Main.DisplayableShape -> Main.DisplayableShape -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS(S(S(S)L)LL)L),1*U(A,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),A)><S(LS(S(S(S)L)LL)L),1*U(A,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Main.DisplayableShape) (y :: Main.DisplayableShape) ->
                 case x of wild { Main.DisplayableShape ds e1 ds1 ->
                 case y of wild1 { Main.DisplayableShape ds2 e2 ds3 ->
                 case Main.$fOrdDisplayableShape_$ccompare e1 e2 of wild2 {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True } } }) -}
84e551aa6eb363bfbced78fd1d4e3f2c
  $fOrdDisplayableShape_$c<= ::
    Main.DisplayableShape -> Main.DisplayableShape -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS(S(S(S)L)LL)L),1*U(A,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),A)><S(LS(S(S(S)L)LL)L),1*U(A,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Main.DisplayableShape) (y :: Main.DisplayableShape) ->
                 case x of wild { Main.DisplayableShape ds e1 ds1 ->
                 case y of wild1 { Main.DisplayableShape ds2 e2 ds3 ->
                 case Main.$fOrdDisplayableShape_$ccompare e1 e2 of wild2 {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False } } }) -}
84e551aa6eb363bfbced78fd1d4e3f2c
  $fOrdDisplayableShape_$c> ::
    Main.DisplayableShape -> Main.DisplayableShape -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS(S(S(S)L)LL)L),1*U(A,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),A)><S(LS(S(S(S)L)LL)L),1*U(A,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Main.DisplayableShape) (y :: Main.DisplayableShape) ->
                 case x of wild { Main.DisplayableShape ds e1 ds1 ->
                 case y of wild1 { Main.DisplayableShape ds2 e2 ds3 ->
                 case Main.$fOrdDisplayableShape_$ccompare e1 e2 of wild2 {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True } } }) -}
84e551aa6eb363bfbced78fd1d4e3f2c
  $fOrdDisplayableShape_$c>= ::
    Main.DisplayableShape -> Main.DisplayableShape -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS(S(S(S)L)LL)L),1*U(A,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),A)><S(LS(S(S(S)L)LL)L),1*U(A,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Main.DisplayableShape) (y :: Main.DisplayableShape) ->
                 case x of wild { Main.DisplayableShape ds e1 ds1 ->
                 case y of wild1 { Main.DisplayableShape ds2 e2 ds3 ->
                 case Main.$fOrdDisplayableShape_$ccompare e1 e2 of wild2 {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }) -}
8130e0984cebc0bbef920349424ce391
  $fOrdDisplayableShape_$ccompare ::
    Main.GameEntityAttributes
    -> Main.GameEntityAttributes -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))><S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.GameEntityAttributes)
                   (w1 :: Main.GameEntityAttributes) ->
                 case w of ww { Main.GameEntityAttributes ww1 ww2 ww3 ->
                 case ww1 of ww4 { (,) ww5 ww6 ->
                 case ww5 of ww7 { GHC.Types.F# ww8 ->
                 case w1 of ww9 { Main.GameEntityAttributes ww10 ww11 ww12 ->
                 case ww10 of ww13 { (,) ww14 ww15 ->
                 case ww14 of ww16 { GHC.Types.F# ww17 ->
                 Main.$w$ccompare
                   ww8
                   ww6
                   ww2
                   ww3
                   ww17
                   ww15
                   ww11
                   ww12 } } } } } }) -}
84e551aa6eb363bfbced78fd1d4e3f2c
  $fOrdDisplayableShape_$ccompare1 ::
    Main.DisplayableShape
    -> Main.DisplayableShape -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS(S(S(S)L)LL)L),1*U(A,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),A)><S(LS(S(S(S)L)LL)L),1*U(A,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.DisplayableShape) (ds1 :: Main.DisplayableShape) ->
                 case ds of wild { Main.DisplayableShape ds2 e1 ds3 ->
                 case ds1 of wild1 { Main.DisplayableShape ds4 e2 ds5 ->
                 Main.$fOrdDisplayableShape_$ccompare e1 e2 } }) -}
84e551aa6eb363bfbced78fd1d4e3f2c
  $fOrdDisplayableShape_$cmax ::
    Main.DisplayableShape
    -> Main.DisplayableShape -> Main.DisplayableShape
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS(S(S(S)L)LL)L),1*U(U,U(U(U(U),U(U)),U(U(U),U(U)),U(U(U),U(U))),U)><S(LS(S(S(S)L)LL)L),1*U(U,U(U(U(U),U(U)),U(U(U),U(U)),U(U(U),U(U))),U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Main.DisplayableShape) (y :: Main.DisplayableShape) ->
                 case x of wild { Main.DisplayableShape ds e1 ds1 ->
                 case y of wild1 { Main.DisplayableShape ds2 e2 ds3 ->
                 case Main.$fOrdDisplayableShape_$ccompare e1 e2 of wild2 {
                   DEFAULT -> wild1 GHC.Types.GT -> wild } } }) -}
84e551aa6eb363bfbced78fd1d4e3f2c
  $fOrdDisplayableShape_$cmin ::
    Main.DisplayableShape
    -> Main.DisplayableShape -> Main.DisplayableShape
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS(S(S(S)L)LL)L),1*U(U,U(U(U(U),U(U)),U(U(U),U(U)),U(U(U),U(U))),U)><S(LS(S(S(S)L)LL)L),1*U(U,U(U(U(U),U(U)),U(U(U),U(U)),U(U(U),U(U))),U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Main.DisplayableShape) (y :: Main.DisplayableShape) ->
                 case x of wild { Main.DisplayableShape ds e1 ds1 ->
                 case y of wild1 { Main.DisplayableShape ds2 e2 ds3 ->
                 case Main.$fOrdDisplayableShape_$ccompare e1 e2 of wild2 {
                   DEFAULT -> wild GHC.Types.GT -> wild1 } } }) -}
8130e0984cebc0bbef920349424ce391
  $fOrdGameEntityAttributes ::
    GHC.Classes.Ord Main.GameEntityAttributes
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.GameEntityAttributes
                  Main.$fEqGameEntityAttributes
                  Main.$fOrdDisplayableShape_$ccompare
                  Main.$fOrdGameEntityAttributes_$c<
                  Main.$fOrdGameEntityAttributes_$c<=
                  Main.$fOrdGameEntityAttributes_$c>
                  Main.$fOrdGameEntityAttributes_$c>=
                  Main.$fOrdGameEntityAttributes_$cmax
                  Main.$fOrdGameEntityAttributes_$cmin -}
8130e0984cebc0bbef920349424ce391
  $fOrdGameEntityAttributes_$c< ::
    Main.GameEntityAttributes
    -> Main.GameEntityAttributes -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))><S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.GameEntityAttributes)
                   (w1 :: Main.GameEntityAttributes) ->
                 case w of ww { Main.GameEntityAttributes ww1 ww2 ww3 ->
                 case ww1 of ww4 { (,) ww5 ww6 ->
                 case ww5 of ww7 { GHC.Types.F# ww8 ->
                 case w1 of ww9 { Main.GameEntityAttributes ww10 ww11 ww12 ->
                 case ww10 of ww13 { (,) ww14 ww15 ->
                 case ww14 of ww16 { GHC.Types.F# ww17 ->
                 Main.$w$c< ww8 ww6 ww2 ww3 ww17 ww15 ww11 ww12 } } } } } }) -}
8130e0984cebc0bbef920349424ce391
  $fOrdGameEntityAttributes_$c<= ::
    Main.GameEntityAttributes
    -> Main.GameEntityAttributes -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))><S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.GameEntityAttributes)
                   (w1 :: Main.GameEntityAttributes) ->
                 case w of ww { Main.GameEntityAttributes ww1 ww2 ww3 ->
                 case ww1 of ww4 { (,) ww5 ww6 ->
                 case ww5 of ww7 { GHC.Types.F# ww8 ->
                 case w1 of ww9 { Main.GameEntityAttributes ww10 ww11 ww12 ->
                 case ww10 of ww13 { (,) ww14 ww15 ->
                 case ww14 of ww16 { GHC.Types.F# ww17 ->
                 Main.$w$c<= ww8 ww6 ww2 ww3 ww17 ww15 ww11 ww12 } } } } } }) -}
8130e0984cebc0bbef920349424ce391
  $fOrdGameEntityAttributes_$c> ::
    Main.GameEntityAttributes
    -> Main.GameEntityAttributes -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))><S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.GameEntityAttributes)
                   (w1 :: Main.GameEntityAttributes) ->
                 case w of ww { Main.GameEntityAttributes ww1 ww2 ww3 ->
                 case ww1 of ww4 { (,) ww5 ww6 ->
                 case ww5 of ww7 { GHC.Types.F# ww8 ->
                 case w1 of ww9 { Main.GameEntityAttributes ww10 ww11 ww12 ->
                 case ww10 of ww13 { (,) ww14 ww15 ->
                 case ww14 of ww16 { GHC.Types.F# ww17 ->
                 Main.$w$c> ww8 ww6 ww2 ww3 ww17 ww15 ww11 ww12 } } } } } }) -}
8130e0984cebc0bbef920349424ce391
  $fOrdGameEntityAttributes_$c>= ::
    Main.GameEntityAttributes
    -> Main.GameEntityAttributes -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))><S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.GameEntityAttributes)
                   (w1 :: Main.GameEntityAttributes) ->
                 case w of ww { Main.GameEntityAttributes ww1 ww2 ww3 ->
                 case ww1 of ww4 { (,) ww5 ww6 ->
                 case ww5 of ww7 { GHC.Types.F# ww8 ->
                 case w1 of ww9 { Main.GameEntityAttributes ww10 ww11 ww12 ->
                 case ww10 of ww13 { (,) ww14 ww15 ->
                 case ww14 of ww16 { GHC.Types.F# ww17 ->
                 Main.$w$c>= ww8 ww6 ww2 ww3 ww17 ww15 ww11 ww12 } } } } } }) -}
8130e0984cebc0bbef920349424ce391
  $fOrdGameEntityAttributes_$cmax ::
    Main.GameEntityAttributes
    -> Main.GameEntityAttributes -> Main.GameEntityAttributes
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)LL),U(U(U(U),U(U)),U(U(U),U(U)),U(U(U),U(U)))><S(S(S(S)L)LL),U(U(U(U),U(U)),U(U(U),U(U)),U(U(U),U(U)))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Main.GameEntityAttributes)
                   (y :: Main.GameEntityAttributes) ->
                 case Main.$fOrdGameEntityAttributes_$c<= x y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
8130e0984cebc0bbef920349424ce391
  $fOrdGameEntityAttributes_$cmin ::
    Main.GameEntityAttributes
    -> Main.GameEntityAttributes -> Main.GameEntityAttributes
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)LL),U(U(U(U),U(U)),U(U(U),U(U)),U(U(U),U(U)))><S(S(S(S)L)LL),U(U(U(U),U(U)),U(U(U),U(U)),U(U(U),U(U)))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Main.GameEntityAttributes)
                   (y :: Main.GameEntityAttributes) ->
                 case Main.$fOrdGameEntityAttributes_$c<= x y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
6b7d09e1353386b812125bfcdfd50080
  $fShowDimensionalAttributes ::
    GHC.Show.Show Main.DimensionalAttributes
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.DimensionalAttributes
                  Main.$fShowDimensionalAttributes_$cshowsPrec
                  Main.$fShowDimensionalAttributes_$cshow
                  Main.$fShowDimensionalAttributes_$cshowList -}
6b7d09e1353386b812125bfcdfd50080
  $fShowDimensionalAttributes1 ::
    Main.DimensionalAttributes -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Main.DimensionalAttributes) ->
                 Main.$w$cshowsPrec 0# w) -}
9ac5004a0cdf2053916fc93dd36be51a
  $fShowDimensionalAttributes2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Rectangle "#) -}
5dbb045d05ecb3b4742b5b90b24b5d98
  $fShowDimensionalAttributes3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Sphere "#) -}
c32988089cb81bc41e5b18cd0d0ad31f
  $fShowDimensionalAttributes4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
6b7d09e1353386b812125bfcdfd50080
  $fShowDimensionalAttributes_$cshow ::
    Main.DimensionalAttributes -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.DimensionalAttributes) ->
                 Main.$fShowDimensionalAttributes_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6b7d09e1353386b812125bfcdfd50080
  $fShowDimensionalAttributes_$cshowList ::
    [Main.DimensionalAttributes] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.DimensionalAttributes
                   Main.$fShowDimensionalAttributes1) -}
6b7d09e1353386b812125bfcdfd50080
  $fShowDimensionalAttributes_$cshowsPrec ::
    GHC.Types.Int -> Main.DimensionalAttributes -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Main.DimensionalAttributes) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$w$cshowsPrec ww1 w1 }) -}
84e551aa6eb363bfbced78fd1d4e3f2c
  $fShowDisplayableShape :: GHC.Show.Show Main.DisplayableShape
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.DisplayableShape
                  Main.$fShowDisplayableShape_$cshowsPrec
                  Main.$fShowDisplayableShape_$cshow
                  Main.$fShowDisplayableShape_$cshowList -}
84e551aa6eb363bfbced78fd1d4e3f2c
  $fShowDisplayableShape1 :: Main.DisplayableShape -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Main.DisplayableShape) ->
                 case w of ww { Main.DisplayableShape ww1 ww2 ww3 ->
                 Main.$w$cshowsPrec1 0# ww1 ww2 ww3 }) -}
2554a43561f0b69b68f9431bb112d5ea
  $fShowDisplayableShape10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VisualAttributes {"#) -}
81dc3693b1be67b9b8c5456d1de6f7d8
  $fShowDisplayableShape2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
3931b6e940d287422920101c54e2d09c
  $fShowDisplayableShape3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "_dimensionalAttributes = "#) -}
2bf327af22b0dd1004128e0a3ecad383
  $fShowDisplayableShape4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_entityAttrs = "#) -}
3798b5e90950b16afc665be96ab52bde
  $fShowDisplayableShape5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
94c87f943f07f19116d4267c25a1138d
  $fShowDisplayableShape6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_visualAttrs = "#) -}
c86e59969c52ce8502c83d99f1bd7608
  $fShowDisplayableShape7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DisplayableShape {"#) -}
53810ef09d50adbf97d38623c50ebf82
  $fShowDisplayableShape8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_displayed = "#) -}
b21c89572d7bdc4ec46a36843269028c
  $fShowDisplayableShape9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_objectColor = "#) -}
84e551aa6eb363bfbced78fd1d4e3f2c
  $fShowDisplayableShape_$cshow ::
    Main.DisplayableShape -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U(U,U,U,U),U),U(U(U(U),U(U)),U(U(U),U(U)),U(U(U),U(U))),1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.DisplayableShape) ->
                 Main.$fShowDisplayableShape_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
84e551aa6eb363bfbced78fd1d4e3f2c
  $fShowDisplayableShape_$cshowList ::
    [Main.DisplayableShape] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.DisplayableShape
                   Main.$fShowDisplayableShape1) -}
84e551aa6eb363bfbced78fd1d4e3f2c
  $fShowDisplayableShape_$cshowsPrec ::
    GHC.Types.Int -> Main.DisplayableShape -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U(U,U,U,U),U),U(U(U(U),U(U)),U(U(U),U(U)),U(U(U),U(U))),1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Main.DisplayableShape) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.DisplayableShape ww3 ww4 ww5 ->
                 Main.$w$cshowsPrec1 ww1 ww3 ww4 ww5 } }) -}
8130e0984cebc0bbef920349424ce391
  $fShowGameEntityAttributes ::
    GHC.Show.Show Main.GameEntityAttributes
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.GameEntityAttributes
                  Main.$fShowGameEntityAttributes_$cshowsPrec
                  Main.$fShowGameEntityAttributes_$cshow
                  Main.$fShowGameEntityAttributes_$cshowList -}
8130e0984cebc0bbef920349424ce391
  $fShowGameEntityAttributes1 ::
    Main.GameEntityAttributes -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Main.GameEntityAttributes)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Main.GameEntityAttributes ww1 ww2 ww3 ->
                 Main.$w$cshowsPrec2 0# ww1 ww2 ww3 w1 }) -}
8130e0984cebc0bbef920349424ce391
  $fShowGameEntityAttributes_$cshow ::
    Main.GameEntityAttributes -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.GameEntityAttributes) ->
                 Main.$fShowGameEntityAttributes_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8130e0984cebc0bbef920349424ce391
  $fShowGameEntityAttributes_$cshowList ::
    [Main.GameEntityAttributes] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.GameEntityAttributes
                   Main.$fShowGameEntityAttributes1) -}
8130e0984cebc0bbef920349424ce391
  $fShowGameEntityAttributes_$cshowsPrec ::
    GHC.Types.Int -> Main.GameEntityAttributes -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.GameEntityAttributes)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.GameEntityAttributes ww3 ww4 ww5 ->
                 Main.$w$cshowsPrec2 ww1 ww3 ww4 ww5 w2 } }) -}
44f19ea42fe517fa4dd9a477abadb3cc
  $fShowGridGame :: GHC.Show.Show Main.GridGame
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.GridGame
                  Main.$fShowGridGame_$cshowsPrec
                  Main.$fShowGridGame_$cshow
                  Main.$fShowGridGame_$cshowList -}
44f19ea42fe517fa4dd9a477abadb3cc
  $fShowGridGame1 :: Main.GridGame -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Main.GridGame) ->
                 case w of ww { Main.Game ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Main.$w$cshowsPrec4 0# ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 }) -}
44f19ea42fe517fa4dd9a477abadb3cc
  $fShowGridGame_$cshow :: Main.GridGame -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(U,1*U,1*U,1*U,1*U,1*U(U,U),1*U(1*U(1*U(U,U,U,U),U),U(U(U(U),U(U)),U(U(U),U(U)),U(U(U),U(U))),1*U),U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.GridGame) ->
                 Main.$fShowGridGame_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
44f19ea42fe517fa4dd9a477abadb3cc
  $fShowGridGame_$cshowList :: [Main.GridGame] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.GridGame
                   Main.$fShowGridGame1) -}
44f19ea42fe517fa4dd9a477abadb3cc
  $fShowGridGame_$cshowsPrec ::
    GHC.Types.Int -> Main.GridGame -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U,1*U,1*U,1*U,1*U,1*U(U,U),1*U(1*U(1*U(U,U,U,U),U),U(U(U(U),U(U)),U(U(U),U(U)),U(U(U),U(U))),1*U),U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Main.GridGame) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Game ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ->
                 Main.$w$cshowsPrec4 ww1 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 } }) -}
6ca2b488f20758f44f464b5a5ac1465d
  $fShowVisualAttributes :: GHC.Show.Show Main.VisualAttributes
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.VisualAttributes
                  Main.$fShowVisualAttributes_$cshowsPrec
                  Main.$fShowVisualAttributes_$cshow
                  Main.$fShowVisualAttributes_$cshowList -}
6ca2b488f20758f44f464b5a5ac1465d
  $fShowVisualAttributes1 :: Main.VisualAttributes -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Main.VisualAttributes) ->
                 case w of ww { Main.VisualAttributes ww1 ww2 ->
                 Main.$w$cshowsPrec3 0# ww1 ww2 }) -}
6ca2b488f20758f44f464b5a5ac1465d
  $fShowVisualAttributes_$cshow ::
    Main.VisualAttributes -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U,U,U,U),U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.VisualAttributes) ->
                 Main.$fShowVisualAttributes_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6ca2b488f20758f44f464b5a5ac1465d
  $fShowVisualAttributes_$cshowList ::
    [Main.VisualAttributes] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.VisualAttributes
                   Main.$fShowVisualAttributes1) -}
6ca2b488f20758f44f464b5a5ac1465d
  $fShowVisualAttributes_$cshowsPrec ::
    GHC.Types.Int -> Main.VisualAttributes -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U(U,U,U,U),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Main.VisualAttributes) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.VisualAttributes ww3 ww4 ->
                 Main.$w$cshowsPrec3 ww1 ww3 ww4 } }) -}
aaa0c53e1b0d5f3048b48e8ea9ae4608
  $s$fOrd(,) :: GHC.Classes.Ord (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Float, GHC.Types.Float)
                  Main.$s$fOrd(,)_$s$fOrd(,)_$cp1Ord
                  (GHC.Classes.$fOrd(,)_$ccompare
                     @ GHC.Types.Float
                     @ GHC.Types.Float
                     GHC.Classes.$fOrdFloat
                     GHC.Classes.$fOrdFloat)
                  (GHC.Classes.$fOrd(,)_$c<
                     @ GHC.Types.Float
                     @ GHC.Types.Float
                     GHC.Classes.$fOrdFloat
                     GHC.Classes.$fOrdFloat)
                  (GHC.Classes.$fOrd(,)_$c<=
                     @ GHC.Types.Float
                     @ GHC.Types.Float
                     GHC.Classes.$fOrdFloat
                     GHC.Classes.$fOrdFloat)
                  (GHC.Classes.$fOrd(,)_$c>
                     @ GHC.Types.Float
                     @ GHC.Types.Float
                     GHC.Classes.$fOrdFloat
                     GHC.Classes.$fOrdFloat)
                  (GHC.Classes.$fOrd(,)_$c>=
                     @ GHC.Types.Float
                     @ GHC.Types.Float
                     GHC.Classes.$fOrdFloat
                     GHC.Classes.$fOrdFloat)
                  (GHC.Classes.$fOrd(,)_$cmax
                     @ GHC.Types.Float
                     @ GHC.Types.Float
                     GHC.Classes.$fOrdFloat
                     GHC.Classes.$fOrdFloat)
                  (GHC.Classes.$fOrd(,)_$cmin
                     @ GHC.Types.Float
                     @ GHC.Types.Float
                     GHC.Classes.$fOrdFloat
                     GHC.Classes.$fOrdFloat) -}
f8857c862f75fe5df440870d901b8498
  $s$fOrd(,)_$s$fOrd(,)_$cp1Ord ::
    GHC.Classes.Eq (GHC.Types.Float, GHC.Types.Float)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Graphics.Gloss.Internals.Data.Picture.$s$fEq(,) -}
71591d5b6d7cf30f7fce975d91227f75
  $s$fShow(,) :: GHC.Show.Show (GHC.Types.Float, GHC.Types.Float)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Float, GHC.Types.Float)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ GHC.Types.Float
                     @ GHC.Types.Float
                     GHC.Float.$fShowFloat
                     GHC.Float.$fShowFloat)
                  Main.$s$fShow(,)_$s$fShow(,)_$cshow
                  Main.$s$fShow(,)_$s$fShow(,)_$cshowList -}
3e1ce240a15d3a4148b407dd028f0835
  $s$fShow(,)_$s$fShow(,)_$cshow ::
    (GHC.Types.Float, GHC.Types.Float) -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U))>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: (GHC.Types.Float, GHC.Types.Float)) ->
                 GHC.Show.$fShow(,)_$cshowsPrec
                   @ GHC.Types.Float
                   @ GHC.Types.Float
                   GHC.Float.$fShowFloat
                   GHC.Float.$fShowFloat
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ec2841e8e197569070aab2e3539370fd
  $s$fShow(,)_$s$fShow(,)_$cshowList ::
    [(GHC.Types.Float, GHC.Types.Float)] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [(GHC.Types.Float, GHC.Types.Float)])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Types.Float, GHC.Types.Float)
                   (GHC.Show.$fShow(,)_$cshowsPrec
                      @ GHC.Types.Float
                      @ GHC.Types.Float
                      GHC.Float.$fShowFloat
                      GHC.Float.$fShowFloat
                      GHC.Show.shows22)
                   eta
                   eta1) -}
c63c5bb10abb59c5f2519fc37efd2e0e
  $sfromList ::
    [(Main.Coordinates, a)] -> Data.Map.Base.Map Main.Coordinates a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(Main.Coordinates, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ Main.Coordinates @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { (,) ipv ipv1 ->
                           Data.Map.Base.Bin
                             @ Main.Coordinates
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Base.Tip @ Main.Coordinates @ a)
                             (Data.Map.Base.Tip @ Main.Coordinates @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of ww { (,) ww1 ww2 ->
                           case ky of ww3 { (,) ww4 ww5 ->
                           case ww1 of wild4 { GHC.Types.F# x1 ->
                           case ww4 of wild5 { GHC.Types.F# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.ltFloat# x1 y) of wild6 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.eqFloat# x1 y) of wild7 {
                                  GHC.Types.False
                                  -> Main.$sfromList_$spoly_go10
                                       @ a
                                       wild5
                                       ww5
                                       ds3
                                       ipv1
                                       (Data.Map.Base.Bin
                                          @ Main.Coordinates
                                          @ a
                                          1#
                                          ww
                                          x
                                          (Data.Map.Base.Tip @ Main.Coordinates @ a)
                                          (Data.Map.Base.Tip @ Main.Coordinates @ a))
                                  GHC.Types.True
                                  -> case ww2 of wild8 { GHC.Types.F# x2 ->
                                     case ww5 of wild9 { GHC.Types.F# y1 ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.geFloat# x2 y1) of wild10 {
                                       GHC.Types.False
                                       -> Main.$sfromList_$s$wpoly_go1
                                            @ a
                                            y
                                            y1
                                            ds3
                                            ipv1
                                            (Data.Map.Base.Bin
                                               @ Main.Coordinates
                                               @ a
                                               1#
                                               ww
                                               x
                                               (Data.Map.Base.Tip @ Main.Coordinates @ a)
                                               (Data.Map.Base.Tip @ Main.Coordinates @ a))
                                            1#
                                       GHC.Types.True
                                       -> Main.$sfromList_$spoly_go10
                                            @ a
                                            wild5
                                            wild9
                                            ds3
                                            ipv1
                                            (Data.Map.Base.Bin
                                               @ Main.Coordinates
                                               @ a
                                               1#
                                               ww
                                               x
                                               (Data.Map.Base.Tip @ Main.Coordinates @ a)
                                               (Data.Map.Base.Tip @ Main.Coordinates @ a)) } } } }
                             GHC.Types.True
                             -> Main.$sfromList_$s$wpoly_go10
                                  @ a
                                  y
                                  ww5
                                  ds3
                                  ipv1
                                  (Data.Map.Base.Bin
                                     @ Main.Coordinates
                                     @ a
                                     1#
                                     ww
                                     x
                                     (Data.Map.Base.Tip @ Main.Coordinates @ a)
                                     (Data.Map.Base.Tip @ Main.Coordinates @ a))
                                  1# } } } } } } } } }) -}
92c2ea10b9fe075eb3972e941efeaa88
  $sfromList_$s$wpoly_go1 ::
    GHC.Prim.Float#
    -> GHC.Prim.Float#
    -> a
    -> [((GHC.Types.Float, GHC.Types.Float), a)]
    -> Data.Map.Base.Map (GHC.Types.Float, GHC.Types.Float) a
    -> GHC.Prim.Int#
    -> Data.Map.Base.Map Main.Coordinates a
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><S,1*U><L,U> -}
2b37bf7dc7bfb87081d984a2eee0f751
  $sfromList_$s$wpoly_go10 ::
    GHC.Prim.Float#
    -> GHC.Types.Float
    -> a
    -> [((GHC.Types.Float, GHC.Types.Float), a)]
    -> Data.Map.Base.Map (GHC.Types.Float, GHC.Types.Float) a
    -> GHC.Prim.Int#
    -> Data.Map.Base.Map Main.Coordinates a
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><S,1*U><L,U> -}
a6d6c939c492e7e6b83f9e7e587debe8
  $sfromList_$spoly_go10 ::
    GHC.Types.Float
    -> GHC.Types.Float
    -> a
    -> [((GHC.Types.Float, GHC.Types.Float), a)]
    -> Data.Map.Base.Map (GHC.Types.Float, GHC.Types.Float) a
    -> Data.Map.Base.Map Main.Coordinates a
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><S,1*U> -}
464174d452bc3546eb1cca057c8cb79a
  $sinsert_$s$w$sgo1 ::
    Data.Map.Base.Map (GHC.Types.Float, GHC.Types.Float) a1
    -> a1
    -> GHC.Types.Float
    -> GHC.Prim.Float#
    -> Data.Map.Base.Map Main.Coordinates a1
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U(U)><L,U> -}
f11fc29df9dec0aacab4a0a2070013d8
  $sinsert_$s$w$sgo10 ::
    Data.Map.Base.Map (GHC.Types.Float, GHC.Types.Float) a1
    -> a1
    -> GHC.Prim.Float#
    -> GHC.Prim.Float#
    -> Data.Map.Base.Map Main.Coordinates a1
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U><L,U> -}
10b82129d04e2dd16ad47b7738a00ea2
  $slookup_$s$wpoly_go1 ::
    Data.Map.Base.Map (GHC.Types.Float, GHC.Types.Float) a
    -> GHC.Types.Float -> GHC.Prim.Float# -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U(U)><L,U> -}
1c53e865a36338a901815f95a8e08663
  $slookup_$s$wpoly_go10 ::
    Data.Map.Base.Map
      (GHC.Types.Float, GHC.Types.Float) Main.DisplayableShape
    -> GHC.Prim.Float#
    -> GHC.Prim.Float#
    -> GHC.Base.Maybe Main.DisplayableShape
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U> -}
b7c35adc833235c1b24f29eaf7603147
  $tc'DisplayableShape :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15796577527428656710##
                   10179456671632583188##
                   Main.$trModule
                   Main.$tc'DisplayableShape1) -}
4e11e6fd182f1f4082d090210603b3a2
  $tc'DisplayableShape1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DisplayableShape"#) -}
4bc39e9741b618040e08de679f285b2d
  $tc'Game :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4536656583985243897##
                   12229724575624676726##
                   Main.$trModule
                   Main.$tc'Game1) -}
53f07f1f7d87658196bd2ee6b919659d
  $tc'Game1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Game"#) -}
1bb5a4a391209b547ce6fe7e96899f67
  $tc'GameEntityAttributes :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   116610815488337507##
                   15542403108762070184##
                   Main.$trModule
                   Main.$tc'GameEntityAttributes1) -}
75ec64d8309881c6a63828f9d844fa40
  $tc'GameEntityAttributes1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'GameEntityAttributes"#) -}
75092cfb7f930123cfb756a9337a5417
  $tc'Rectangle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9532593664268427958##
                   3886231086898786240##
                   Main.$trModule
                   Main.$tc'Rectangle1) -}
9efe04ddf032816e783833c3217d8dd6
  $tc'Rectangle1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Rectangle"#) -}
afee2f67fcc87a5447ac93aae721c00a
  $tc'Sphere :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12318485090997453429##
                   32698682353962901##
                   Main.$trModule
                   Main.$tc'Sphere1) -}
9e90395bc7317918e316dc1469cfd212
  $tc'Sphere1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Sphere"#) -}
50a0a7555a1b393f8cfb8927ed1c73a5
  $tc'VisualAttributes :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   841245600848388126##
                   16454863617029474814##
                   Main.$trModule
                   Main.$tc'VisualAttributes1) -}
23edc268787acb4bfe8d34b3f8857557
  $tc'VisualAttributes1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'VisualAttributes"#) -}
6a80de4446c80691f21012931bb353ac
  $tcDimensionalAttributes :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13936276575064909414##
                   12090527928276669945##
                   Main.$trModule
                   Main.$tcDimensionalAttributes1) -}
5092c98856f8e2ea72465673355ad839
  $tcDimensionalAttributes1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "DimensionalAttributes"#) -}
f2f0a95b2b9a4eb7ac6b5811e946289a
  $tcDisplayableShape :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8063429969786939156##
                   4344958715701902288##
                   Main.$trModule
                   Main.$tcDisplayableShape1) -}
d73c862cc9e83d94a65ff6c230207a0a
  $tcDisplayableShape1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "DisplayableShape"#) -}
cbad4695115c1308864898ae2a8e0310
  $tcGameEntityAttributes :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13878899124301432092##
                   18182138736830144092##
                   Main.$trModule
                   Main.$tcGameEntityAttributes1) -}
ebbf69d70e0b66174739c15fbad8d604
  $tcGameEntityAttributes1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "GameEntityAttributes"#) -}
590c81dfe203c0e1ef81a423f21c313a
  $tcGridGame :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12306942519936650779##
                   17495226703497536726##
                   Main.$trModule
                   Main.$tcGridGame1) -}
94520c245d9ab453286cc7fe557c3547
  $tcGridGame1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "GridGame"#) -}
72be6e8c667d5dd3c8a583ae39b72b51
  $tcVisualAttributes :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12714736436847476244##
                   403759658714118303##
                   Main.$trModule
                   Main.$tcVisualAttributes1) -}
5b780dd6827b1017e6380c4eb2f4b653
  $tcVisualAttributes1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "VisualAttributes"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
478187dcee26b626026d14fb08fde2b6
  $w$c< ::
    GHC.Prim.Float#
    -> GHC.Types.Float
    -> Main.Position
    -> Main.Coordinates
    -> GHC.Prim.Float#
    -> GHC.Types.Float
    -> Main.Position
    -> Main.Coordinates
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(1*U(U),1*U(U))><L,1*U(1*U(U),1*U(U))><S,U><L,1*U(U)><L,1*U(1*U(U),1*U(U))><L,1*U(1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Float#)
                   (ww1 :: GHC.Types.Float)
                   (ww2 :: Main.Position)
                   (ww3 :: Main.Coordinates)
                   (ww4 :: GHC.Prim.Float#)
                   (ww5 :: GHC.Types.Float)
                   (ww6 :: Main.Position)
                   (ww7 :: Main.Coordinates) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.ltFloat# ww ww4) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqFloat# ww ww4) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ww1 of wild { GHC.Types.F# x ->
                           case ww5 of wild1 { GHC.Types.F# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.ltFloat# x y) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.eqFloat# x y) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case ww2 of ww8 { (,) ww9 ww10 ->
                                     case ww6 of ww11 { (,) ww12 ww13 ->
                                     case ww9 of wild6 { GHC.Types.F# x1 ->
                                     case ww12 of wild7 { GHC.Types.F# y1 ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.ltFloat# x1 y1) of wild8 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.eqFloat# x1 y1) of wild9 {
                                            GHC.Types.False -> GHC.Types.False
                                            GHC.Types.True
                                            -> case ww10 of wild10 { GHC.Types.F# x2 ->
                                               case ww13 of wild11 { GHC.Types.F# y2 ->
                                               case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.ltFloat# x2 y2) of wild12 {
                                                 GHC.Types.False
                                                 -> case GHC.Prim.tagToEnum#
                                                           @ GHC.Types.Bool
                                                           (GHC.Prim.eqFloat# x2 y2) of wild13 {
                                                      GHC.Types.False -> GHC.Types.False
                                                      GHC.Types.True
                                                      -> case ww3 of ww14 { (,) ww15 ww16 ->
                                                         case ww7 of ww17 { (,) ww18 ww19 ->
                                                         case ww15 of wild14 { GHC.Types.F# x3 ->
                                                         case ww18 of wild15 { GHC.Types.F# y3 ->
                                                         case GHC.Prim.tagToEnum#
                                                                @ GHC.Types.Bool
                                                                (GHC.Prim.ltFloat#
                                                                   x3
                                                                   y3) of wild16 {
                                                           GHC.Types.False
                                                           -> case GHC.Prim.tagToEnum#
                                                                     @ GHC.Types.Bool
                                                                     (GHC.Prim.eqFloat#
                                                                        x3
                                                                        y3) of wild17 {
                                                                GHC.Types.False -> GHC.Types.False
                                                                GHC.Types.True
                                                                -> GHC.Classes.$fOrdFloat_$c<
                                                                     ww16
                                                                     ww19 }
                                                           GHC.Types.True
                                                           -> GHC.Types.True } } } } } }
                                                 GHC.Types.True -> GHC.Types.True } } } }
                                       GHC.Types.True -> GHC.Types.True } } } } } }
                             GHC.Types.True -> GHC.Types.True } } } }
                   GHC.Types.True -> GHC.Types.True }) -}
0f8e6518d8f7254c5b150f03b749c194
  $w$c<= ::
    GHC.Prim.Float#
    -> GHC.Types.Float
    -> Main.Position
    -> Main.Coordinates
    -> GHC.Prim.Float#
    -> GHC.Types.Float
    -> Main.Position
    -> Main.Coordinates
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(1*U(U),1*U(U))><L,1*U(1*U(U),1*U(U))><S,U><L,1*U(U)><L,1*U(1*U(U),1*U(U))><L,1*U(1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Float#)
                   (ww1 :: GHC.Types.Float)
                   (ww2 :: Main.Position)
                   (ww3 :: Main.Coordinates)
                   (ww4 :: GHC.Prim.Float#)
                   (ww5 :: GHC.Types.Float)
                   (ww6 :: Main.Position)
                   (ww7 :: Main.Coordinates) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.ltFloat# ww ww4) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqFloat# ww ww4) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ww1 of wild { GHC.Types.F# x ->
                           case ww5 of wild1 { GHC.Types.F# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.ltFloat# x y) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.eqFloat# x y) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case ww2 of ww8 { (,) ww9 ww10 ->
                                     case ww6 of ww11 { (,) ww12 ww13 ->
                                     case ww9 of wild6 { GHC.Types.F# x1 ->
                                     case ww12 of wild7 { GHC.Types.F# y1 ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.ltFloat# x1 y1) of wild8 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.eqFloat# x1 y1) of wild9 {
                                            GHC.Types.False -> GHC.Types.False
                                            GHC.Types.True
                                            -> case ww10 of wild10 { GHC.Types.F# x2 ->
                                               case ww13 of wild11 { GHC.Types.F# y2 ->
                                               case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.ltFloat# x2 y2) of wild12 {
                                                 GHC.Types.False
                                                 -> case GHC.Prim.tagToEnum#
                                                           @ GHC.Types.Bool
                                                           (GHC.Prim.eqFloat# x2 y2) of wild13 {
                                                      GHC.Types.False -> GHC.Types.False
                                                      GHC.Types.True
                                                      -> case ww3 of ww14 { (,) ww15 ww16 ->
                                                         case ww7 of ww17 { (,) ww18 ww19 ->
                                                         case ww15 of wild14 { GHC.Types.F# x3 ->
                                                         case ww18 of wild15 { GHC.Types.F# y3 ->
                                                         case GHC.Prim.tagToEnum#
                                                                @ GHC.Types.Bool
                                                                (GHC.Prim.ltFloat#
                                                                   x3
                                                                   y3) of wild16 {
                                                           GHC.Types.False
                                                           -> case GHC.Prim.tagToEnum#
                                                                     @ GHC.Types.Bool
                                                                     (GHC.Prim.eqFloat#
                                                                        x3
                                                                        y3) of wild17 {
                                                                GHC.Types.False -> GHC.Types.False
                                                                GHC.Types.True
                                                                -> GHC.Classes.$fOrdFloat_$c<=
                                                                     ww16
                                                                     ww19 }
                                                           GHC.Types.True
                                                           -> GHC.Types.True } } } } } }
                                                 GHC.Types.True -> GHC.Types.True } } } }
                                       GHC.Types.True -> GHC.Types.True } } } } } }
                             GHC.Types.True -> GHC.Types.True } } } }
                   GHC.Types.True -> GHC.Types.True }) -}
16ebdb335f50729927858ef336604643
  $w$c== ::
    GHC.Prim.Float#
    -> GHC.Prim.Float#
    -> GHC.Prim.Float#
    -> GHC.Prim.Float#
    -> GHC.Types.Bool
    -> Main.GameEntityAttributes
    -> Main.DimensionalAttributes
    -> GHC.Prim.Float#
    -> GHC.Prim.Float#
    -> GHC.Prim.Float#
    -> GHC.Prim.Float#
    -> GHC.Types.Bool
    -> Main.GameEntityAttributes
    -> Main.DimensionalAttributes
    -> GHC.Types.Bool
  {- Arity: 14, HasNoCafRefs,
     Strictness: <S,U><L,U><L,U><L,U><L,1*U><L,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))><L,1*U><S,U><L,U><L,U><L,U><L,1*U><L,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Float#)
                   (ww1 :: GHC.Prim.Float#)
                   (ww2 :: GHC.Prim.Float#)
                   (ww3 :: GHC.Prim.Float#)
                   (ww4 :: GHC.Types.Bool)
                   (ww5 :: Main.GameEntityAttributes)
                   (ww6 :: Main.DimensionalAttributes)
                   (ww7 :: GHC.Prim.Float#)
                   (ww8 :: GHC.Prim.Float#)
                   (ww9 :: GHC.Prim.Float#)
                   (ww10 :: GHC.Prim.Float#)
                   (ww11 :: GHC.Types.Bool)
                   (ww12 :: Main.GameEntityAttributes)
                   (ww13 :: Main.DimensionalAttributes) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqFloat# ww ww7) of wild2 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqFloat# ww1 ww8) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.eqFloat# ww2 ww9) of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.eqFloat# ww3 ww10) of wild {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> let {
                                       $j :: GHC.Prim.Void# -> GHC.Types.Bool {- Arity: 1 -}
                                       = \ (w :: GHC.Prim.Void#)[OneShot] ->
                                         case ww5 of ww14 { Main.GameEntityAttributes ww15 ww16 ww17 ->
                                         case ww15 of ww18 { (,) ww19 ww20 ->
                                         case ww19 of ww21 { GHC.Types.F# ww22 ->
                                         case ww12 of ww23 { Main.GameEntityAttributes ww24 ww25 ww26 ->
                                         case ww24 of ww27 { (,) ww28 ww29 ->
                                         case ww28 of ww30 { GHC.Types.F# ww31 ->
                                         case Main.$w$c==1
                                                ww22
                                                ww20
                                                ww16
                                                ww17
                                                ww31
                                                ww29
                                                ww25
                                                ww26 of wild1 {
                                           GHC.Types.False -> GHC.Types.False
                                           GHC.Types.True
                                           -> Main.$fEqDimensionalAttributes_$c==
                                                ww6
                                                ww13 } } } } } } }
                                     } in
                                     case ww4 of wild1 {
                                       GHC.Types.False
                                       -> case ww11 of wild5 {
                                            GHC.Types.False -> $j GHC.Prim.void#
                                            GHC.Types.True -> GHC.Types.False }
                                       GHC.Types.True
                                       -> case ww11 of wild5 {
                                            GHC.Types.False -> GHC.Types.False
                                            GHC.Types.True -> $j GHC.Prim.void# } } } } } }) -}
959ecb59921e7da75d8ec0aab2456c18
  $w$c==1 ::
    GHC.Prim.Float#
    -> GHC.Types.Float
    -> Main.Position
    -> Main.Coordinates
    -> GHC.Prim.Float#
    -> GHC.Types.Float
    -> Main.Position
    -> Main.Coordinates
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(1*U(U),1*U(U))><L,1*U(1*U(U),1*U(U))><S,U><L,1*U(U)><L,1*U(1*U(U),1*U(U))><L,1*U(1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Float#)
                   (ww1 :: GHC.Types.Float)
                   (ww2 :: Main.Position)
                   (ww3 :: Main.Coordinates)
                   (ww4 :: GHC.Prim.Float#)
                   (ww5 :: GHC.Types.Float)
                   (ww6 :: Main.Position)
                   (ww7 :: Main.Coordinates) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqFloat# ww ww4) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.F# x ->
                      case ww5 of wild2 { GHC.Types.F# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqFloat# x y) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ww2 of ww8 { (,) ww9 ww10 ->
                           case ww6 of ww11 { (,) ww12 ww13 ->
                           case ww9 of wild4 { GHC.Types.F# x1 ->
                           case ww12 of wild5 { GHC.Types.F# y1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.eqFloat# x1 y1) of wild6 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case ww10 of wild7 { GHC.Types.F# x2 ->
                                case ww13 of wild8 { GHC.Types.F# y2 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.eqFloat# x2 y2) of wild9 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case ww3 of ww14 { (,) ww15 ww16 ->
                                     case ww7 of ww17 { (,) ww18 ww19 ->
                                     case ww15 of wild10 { GHC.Types.F# x3 ->
                                     case ww18 of wild11 { GHC.Types.F# y3 ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.eqFloat# x3 y3) of wild12 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Classes.eqFloat
                                            ww16
                                            ww19 } } } } } } } } } } } } } } } } }) -}
a1c4b7b724e7e054160a64cdac5dd8bc
  $w$c==2 ::
    GHC.Prim.Float#
    -> GHC.Prim.Float#
    -> GHC.Prim.Float#
    -> GHC.Prim.Float#
    -> GHC.Types.Bool
    -> GHC.Prim.Float#
    -> GHC.Prim.Float#
    -> GHC.Prim.Float#
    -> GHC.Prim.Float#
    -> GHC.Types.Bool
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,U><L,U><L,U><L,U><L,1*U><S,U><L,U><L,U><L,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Float#)
                   (ww1 :: GHC.Prim.Float#)
                   (ww2 :: GHC.Prim.Float#)
                   (ww3 :: GHC.Prim.Float#)
                   (ww4 :: GHC.Types.Bool)
                   (ww5 :: GHC.Prim.Float#)
                   (ww6 :: GHC.Prim.Float#)
                   (ww7 :: GHC.Prim.Float#)
                   (ww8 :: GHC.Prim.Float#)
                   (ww9 :: GHC.Types.Bool) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqFloat# ww ww5) of wild2 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqFloat# ww1 ww6) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.eqFloat# ww2 ww7) of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.eqFloat# ww3 ww8) of wild {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True -> GHC.Classes.$fEqBool_$c== ww4 ww9 } } } }) -}
cf6a693014bc6798785c9c73b5ad9681
  $w$c> ::
    GHC.Prim.Float#
    -> GHC.Types.Float
    -> Main.Position
    -> Main.Coordinates
    -> GHC.Prim.Float#
    -> GHC.Types.Float
    -> Main.Position
    -> Main.Coordinates
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(1*U(U),1*U(U))><L,1*U(1*U(U),1*U(U))><S,U><L,1*U(U)><L,1*U(1*U(U),1*U(U))><L,1*U(1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Float#)
                   (ww1 :: GHC.Types.Float)
                   (ww2 :: Main.Position)
                   (ww3 :: Main.Coordinates)
                   (ww4 :: GHC.Prim.Float#)
                   (ww5 :: GHC.Types.Float)
                   (ww6 :: Main.Position)
                   (ww7 :: Main.Coordinates) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.ltFloat# ww ww4) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqFloat# ww ww4) of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True
                        -> case ww1 of wild { GHC.Types.F# x ->
                           case ww5 of wild1 { GHC.Types.F# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.ltFloat# x y) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.eqFloat# x y) of wild5 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True
                                  -> case ww2 of ww8 { (,) ww9 ww10 ->
                                     case ww6 of ww11 { (,) ww12 ww13 ->
                                     case ww9 of wild6 { GHC.Types.F# x1 ->
                                     case ww12 of wild7 { GHC.Types.F# y1 ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.ltFloat# x1 y1) of wild8 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.eqFloat# x1 y1) of wild9 {
                                            GHC.Types.False -> GHC.Types.True
                                            GHC.Types.True
                                            -> case ww10 of wild10 { GHC.Types.F# x2 ->
                                               case ww13 of wild11 { GHC.Types.F# y2 ->
                                               case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.ltFloat# x2 y2) of wild12 {
                                                 GHC.Types.False
                                                 -> case GHC.Prim.tagToEnum#
                                                           @ GHC.Types.Bool
                                                           (GHC.Prim.eqFloat# x2 y2) of wild13 {
                                                      GHC.Types.False -> GHC.Types.True
                                                      GHC.Types.True
                                                      -> case ww3 of ww14 { (,) ww15 ww16 ->
                                                         case ww7 of ww17 { (,) ww18 ww19 ->
                                                         case ww15 of wild14 { GHC.Types.F# x3 ->
                                                         case ww18 of wild15 { GHC.Types.F# y3 ->
                                                         case GHC.Prim.tagToEnum#
                                                                @ GHC.Types.Bool
                                                                (GHC.Prim.ltFloat#
                                                                   x3
                                                                   y3) of wild16 {
                                                           GHC.Types.False
                                                           -> case GHC.Prim.tagToEnum#
                                                                     @ GHC.Types.Bool
                                                                     (GHC.Prim.eqFloat#
                                                                        x3
                                                                        y3) of wild17 {
                                                                GHC.Types.False -> GHC.Types.True
                                                                GHC.Types.True
                                                                -> GHC.Classes.$fOrdFloat_$c>
                                                                     ww16
                                                                     ww19 }
                                                           GHC.Types.True
                                                           -> GHC.Types.False } } } } } }
                                                 GHC.Types.True -> GHC.Types.False } } } }
                                       GHC.Types.True -> GHC.Types.False } } } } } }
                             GHC.Types.True -> GHC.Types.False } } } }
                   GHC.Types.True -> GHC.Types.False }) -}
253e2fd74f0e79c4f76939888a6f5133
  $w$c>= ::
    GHC.Prim.Float#
    -> GHC.Types.Float
    -> Main.Position
    -> Main.Coordinates
    -> GHC.Prim.Float#
    -> GHC.Types.Float
    -> Main.Position
    -> Main.Coordinates
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(1*U(U),1*U(U))><L,1*U(1*U(U),1*U(U))><S,U><L,1*U(U)><L,1*U(1*U(U),1*U(U))><L,1*U(1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Float#)
                   (ww1 :: GHC.Types.Float)
                   (ww2 :: Main.Position)
                   (ww3 :: Main.Coordinates)
                   (ww4 :: GHC.Prim.Float#)
                   (ww5 :: GHC.Types.Float)
                   (ww6 :: Main.Position)
                   (ww7 :: Main.Coordinates) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.ltFloat# ww ww4) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqFloat# ww ww4) of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True
                        -> case ww1 of wild { GHC.Types.F# x ->
                           case ww5 of wild1 { GHC.Types.F# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.ltFloat# x y) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.eqFloat# x y) of wild5 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True
                                  -> case ww2 of ww8 { (,) ww9 ww10 ->
                                     case ww6 of ww11 { (,) ww12 ww13 ->
                                     case ww9 of wild6 { GHC.Types.F# x1 ->
                                     case ww12 of wild7 { GHC.Types.F# y1 ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.ltFloat# x1 y1) of wild8 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.eqFloat# x1 y1) of wild9 {
                                            GHC.Types.False -> GHC.Types.True
                                            GHC.Types.True
                                            -> case ww10 of wild10 { GHC.Types.F# x2 ->
                                               case ww13 of wild11 { GHC.Types.F# y2 ->
                                               case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.ltFloat# x2 y2) of wild12 {
                                                 GHC.Types.False
                                                 -> case GHC.Prim.tagToEnum#
                                                           @ GHC.Types.Bool
                                                           (GHC.Prim.eqFloat# x2 y2) of wild13 {
                                                      GHC.Types.False -> GHC.Types.True
                                                      GHC.Types.True
                                                      -> case ww3 of ww14 { (,) ww15 ww16 ->
                                                         case ww7 of ww17 { (,) ww18 ww19 ->
                                                         case ww15 of wild14 { GHC.Types.F# x3 ->
                                                         case ww18 of wild15 { GHC.Types.F# y3 ->
                                                         case GHC.Prim.tagToEnum#
                                                                @ GHC.Types.Bool
                                                                (GHC.Prim.ltFloat#
                                                                   x3
                                                                   y3) of wild16 {
                                                           GHC.Types.False
                                                           -> case GHC.Prim.tagToEnum#
                                                                     @ GHC.Types.Bool
                                                                     (GHC.Prim.eqFloat#
                                                                        x3
                                                                        y3) of wild17 {
                                                                GHC.Types.False -> GHC.Types.True
                                                                GHC.Types.True
                                                                -> GHC.Classes.$fOrdFloat_$c>=
                                                                     ww16
                                                                     ww19 }
                                                           GHC.Types.True
                                                           -> GHC.Types.False } } } } } }
                                                 GHC.Types.True -> GHC.Types.False } } } }
                                       GHC.Types.True -> GHC.Types.False } } } } } }
                             GHC.Types.True -> GHC.Types.False } } } }
                   GHC.Types.True -> GHC.Types.False }) -}
e106ebfa422b2e6190b264c58c92014e
  $w$ccompare ::
    GHC.Prim.Float#
    -> GHC.Types.Float
    -> Main.Position
    -> Main.Coordinates
    -> GHC.Prim.Float#
    -> GHC.Types.Float
    -> Main.Position
    -> Main.Coordinates
    -> GHC.Types.Ordering
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(1*U(U),1*U(U))><L,1*U(1*U(U),1*U(U))><S,U><L,1*U(U)><L,1*U(1*U(U),1*U(U))><L,1*U(1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Float#)
                   (ww1 :: GHC.Types.Float)
                   (ww2 :: Main.Position)
                   (ww3 :: Main.Coordinates)
                   (ww4 :: GHC.Prim.Float#)
                   (ww5 :: GHC.Types.Float)
                   (ww6 :: Main.Position)
                   (ww7 :: Main.Coordinates) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.ltFloat# ww ww4) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqFloat# ww ww4) of wild3 {
                        GHC.Types.False -> GHC.Types.GT
                        GHC.Types.True
                        -> case ww1 of wild { GHC.Types.F# x ->
                           case ww5 of wild1 { GHC.Types.F# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.ltFloat# x y) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.eqFloat# x y) of wild5 {
                                  GHC.Types.False -> GHC.Types.GT
                                  GHC.Types.True
                                  -> case ww2 of ww8 { (,) ww9 ww10 ->
                                     case ww6 of ww11 { (,) ww12 ww13 ->
                                     case ww9 of wild6 { GHC.Types.F# x1 ->
                                     case ww12 of wild7 { GHC.Types.F# y1 ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.ltFloat# x1 y1) of wild8 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.eqFloat# x1 y1) of wild9 {
                                            GHC.Types.False -> GHC.Types.GT
                                            GHC.Types.True
                                            -> case ww10 of wild10 { GHC.Types.F# x2 ->
                                               case ww13 of wild11 { GHC.Types.F# y2 ->
                                               case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.ltFloat# x2 y2) of wild12 {
                                                 GHC.Types.False
                                                 -> case GHC.Prim.tagToEnum#
                                                           @ GHC.Types.Bool
                                                           (GHC.Prim.eqFloat# x2 y2) of wild13 {
                                                      GHC.Types.False -> GHC.Types.GT
                                                      GHC.Types.True
                                                      -> case ww3 of ww14 { (,) ww15 ww16 ->
                                                         case ww7 of ww17 { (,) ww18 ww19 ->
                                                         case ww15 of wild14 { GHC.Types.F# x3 ->
                                                         case ww18 of wild15 { GHC.Types.F# y3 ->
                                                         case GHC.Prim.tagToEnum#
                                                                @ GHC.Types.Bool
                                                                (GHC.Prim.ltFloat#
                                                                   x3
                                                                   y3) of wild16 {
                                                           GHC.Types.False
                                                           -> case GHC.Prim.tagToEnum#
                                                                     @ GHC.Types.Bool
                                                                     (GHC.Prim.eqFloat#
                                                                        x3
                                                                        y3) of wild17 {
                                                                GHC.Types.False -> GHC.Types.GT
                                                                GHC.Types.True
                                                                -> GHC.Classes.$fOrdFloat_$ccompare
                                                                     ww16
                                                                     ww19 }
                                                           GHC.Types.True
                                                           -> GHC.Types.LT } } } } } }
                                                 GHC.Types.True -> GHC.Types.LT } } } }
                                       GHC.Types.True -> GHC.Types.LT } } } } } }
                             GHC.Types.True -> GHC.Types.LT } } } }
                   GHC.Types.True -> GHC.Types.LT }) -}
6b7d09e1353386b812125bfcdfd50080
  $w$cshowsPrec ::
    GHC.Prim.Int# -> Main.DimensionalAttributes -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Main.DimensionalAttributes) ->
                 case w of wild {
                   Main.Sphere b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww1 { GHC.Types.F# ww2 ->
                          GHC.Float.$w$sshowSignedFloat1
                            GHC.Float.$fShowFloat_$sshowFloat
                            Main.$fShowDimensionalAttributes4
                            ww2 }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Main.$fShowDimensionalAttributes3
                             (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowDimensionalAttributes3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }
                   Main.Rectangle b1 b2
                   -> let {
                        f :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww1 { GHC.Types.F# ww2 ->
                          GHC.Float.$w$sshowSignedFloat1
                            GHC.Float.$fShowFloat_$sshowFloat
                            Main.$fShowDimensionalAttributes4
                            ww2 }
                      } in
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b2 of ww1 { GHC.Types.F# ww2 ->
                          GHC.Float.$w$sshowSignedFloat1
                            GHC.Float.$fShowFloat_$sshowFloat
                            Main.$fShowDimensionalAttributes4
                            ww2 }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Main.$fShowDimensionalAttributes2
                             (f (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowDimensionalAttributes2
                                (f (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (g (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.shows4
                                            x))))) } }) -}
7cf184cfec2e1bf63c8ccbd64d8d377b
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Main.VisualAttributes
    -> Main.GameEntityAttributes
    -> Main.DimensionalAttributes
    -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <S,U><L,1*U(1*U(U,U,U,U),U)><L,U(U(U(U),U(U)),U(U(U),U(U)),U(U(U),U(U)))><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Main.VisualAttributes)
                   (ww2 :: Main.GameEntityAttributes)
                   (ww3 :: Main.DimensionalAttributes) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww4 { Main.VisualAttributes ww5 ww6 ->
                     Main.$w$cshowsPrec3 0# ww5 ww6 }
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = Main.$w$cshowsPrec 0# ww3
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowDisplayableShape7
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Main.$fShowDisplayableShape6
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowDisplayableShape5
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Main.$fShowDisplayableShape4
                                   (case ww2 of ww4 { Main.GameEntityAttributes ww5 ww6 ww7 ->
                                    Main.$w$cshowsPrec2
                                      0#
                                      ww5
                                      ww6
                                      ww7
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Main.$fShowDisplayableShape5
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            Main.$fShowDisplayableShape3
                                            (f1
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  Main.$fShowDisplayableShape2
                                                  x)))) })))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
4923c6eeca06e0551cd3a3d282bec62f
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> (GHC.Types.Float, GHC.Types.Float)
    -> Main.Position
    -> Main.Coordinates
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5,
     Strictness: <S,U><L,1*U(1*U(U),1*U(U))><L,1*U(1*U(U),1*U(U))><L,1*U(1*U(U),1*U(U))><L,U>,
     Inline: [0] -}
cb9eda6fc9c2a43d0cfe2b426bb02f25
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> Graphics.Gloss.Internals.Data.Color.Color
    -> GHC.Types.Bool
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U(U,U,U,U)><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Graphics.Gloss.Internals.Data.Color.Color)
                   (ww2 :: GHC.Types.Bool) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww3 { Graphics.Gloss.Internals.Data.Color.RGBA ww4 ww5 ww6 ww7 ->
                     Graphics.Gloss.Internals.Data.Color.$w$cshowsPrec
                       0#
                       ww4
                       ww5
                       ww6
                       ww7 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowDisplayableShape10
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Main.$fShowDisplayableShape9
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowDisplayableShape5
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Main.$fShowDisplayableShape8
                                   (case ww2 of wild {
                                      GHC.Types.False
                                      -> GHC.Base.++
                                           @ GHC.Types.Char
                                           GHC.Show.shows18
                                           (GHC.Base.++
                                              @ GHC.Types.Char
                                              Main.$fShowDisplayableShape2
                                              x)
                                      GHC.Types.True
                                      -> GHC.Base.++
                                           @ GHC.Types.Char
                                           GHC.Show.shows17
                                           (GHC.Base.++
                                              @ GHC.Types.Char
                                              Main.$fShowDisplayableShape2
                                              x) })))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
042b57d52f9bee2637aabd845dfaa186
  $w$cshowsPrec4 ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> Data.Map.Base.Map Main.Coordinates Main.DisplayableShape
    -> Data.Map.Base.Map Main.Coordinates Main.DisplayableShape
    -> Data.Map.Base.Map Main.Coordinates Main.DisplayableShape
    -> Data.Map.Base.Map Main.Coordinates Main.DisplayableShape
    -> Queue.Queue Main.DisplayableShape
    -> Main.DisplayableShape
    -> GHC.Types.Int
    -> GHC.Show.ShowS
  {- Arity: 9,
     Strictness: <S,U><L,U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U(U,U)><L,1*U(1*U(1*U(U,U,U,U),U),U(U(U(U),U(U)),U(U(U),U(U)),U(U(U),U(U))),1*U)><L,U(U)>,
     Inline: [0] -}
81e82977ebc9f07c747eb7ab9024bdd6
  $w$sgo10 ::
    GHC.Types.Float
    -> GHC.Types.Float
    -> a1
    -> Data.Map.Base.Map Main.Coordinates a1
    -> Data.Map.Base.Map Main.Coordinates a1
  {- Arity: 4, Strictness: <L,U(U)><L,U(U)><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ a1
                   (ww :: GHC.Types.Float)
                   (ww1 :: GHC.Types.Float)
                   (w :: a1)
                   (w1 :: Data.Map.Base.Map Main.Coordinates a1) ->
                 case w1 of wild {
                   Data.Map.Base.Bin dt ky y l r
                   -> case ky of ww3 { (,) ww4 ww5 ->
                      case ww of wild1 { GHC.Types.F# x ->
                      case ww4 of wild2 { GHC.Types.F# y1 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.ltFloat# x y1) of wild3 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.eqFloat# x y1) of wild4 {
                             GHC.Types.False
                             -> Data.Map.Base.balanceR
                                  @ Main.Coordinates
                                  @ a1
                                  ww3
                                  y
                                  l
                                  (Main.$sinsert_$s$w$sgo1 @ a1 r w ww1 x)
                             GHC.Types.True
                             -> case ww1 of wild5 { GHC.Types.F# x1 ->
                                case ww5 of wild6 { GHC.Types.F# y2 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.ltFloat# x1 y2) of wild7 {
                                  GHC.Types.False
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.eqFloat# x1 y2) of wild8 {
                                       GHC.Types.False
                                       -> Data.Map.Base.balanceR
                                            @ Main.Coordinates
                                            @ a1
                                            ww3
                                            y
                                            l
                                            (Main.$sinsert_$s$w$sgo10 @ a1 r w x1 x)
                                       GHC.Types.True
                                       -> Data.Map.Base.Bin
                                            @ Main.Coordinates
                                            @ a1
                                            dt
                                            (wild1, wild5)
                                            w
                                            l
                                            r }
                                  GHC.Types.True
                                  -> Data.Map.Base.balanceL
                                       @ Main.Coordinates
                                       @ a1
                                       ww3
                                       y
                                       (Main.$sinsert_$s$w$sgo10 @ a1 l w x1 x)
                                       r } } } }
                        GHC.Types.True
                        -> Data.Map.Base.balanceL
                             @ Main.Coordinates
                             @ a1
                             ww3
                             y
                             (Main.$sinsert_$s$w$sgo1 @ a1 l w ww1 x)
                             r } } } }
                   Data.Map.Base.Tip
                   -> Data.Map.Base.Bin
                        @ Main.Coordinates
                        @ a1
                        1#
                        (ww, ww1)
                        w
                        (Data.Map.Base.Tip @ Main.Coordinates @ a1)
                        (Data.Map.Base.Tip @ Main.Coordinates @ a1) }) -}
60a6882c50ee8f528a829d7cd0caa293
  $wpoly_go10 ::
    GHC.Types.Float
    -> GHC.Types.Float
    -> Data.Map.Base.Map Main.Coordinates a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(U)><L,U(U)><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Types.Float)
                   (ww1 :: GHC.Types.Float)
                   (w :: Data.Map.Base.Map Main.Coordinates a) ->
                 case w of wild {
                   Data.Map.Base.Bin dt kx x l r
                   -> case kx of ww3 { (,) ww4 ww5 ->
                      case ww of wild1 { GHC.Types.F# x1 ->
                      case ww4 of wild2 { GHC.Types.F# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.ltFloat# x1 y) of wild3 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.eqFloat# x1 y) of wild4 {
                             GHC.Types.False -> Main.$slookup_$s$wpoly_go1 @ a r ww1 x1
                             GHC.Types.True
                             -> case ww1 of wild5 { GHC.Types.F# x2 ->
                                case ww5 of wild6 { GHC.Types.F# y1 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.ltFloat# x2 y1) of wild7 {
                                  GHC.Types.False
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.eqFloat# x2 y1) of wild8 {
                                       GHC.Types.False -> Main.$slookup_$s$wpoly_go1 @ a r wild5 x1
                                       GHC.Types.True -> GHC.Base.Just @ a x }
                                  GHC.Types.True
                                  -> Main.$slookup_$s$wpoly_go1 @ a l wild5 x1 } } } }
                        GHC.Types.True -> Main.$slookup_$s$wpoly_go1 @ a l ww1 x1 } } } }
                   Data.Map.Base.Tip -> GHC.Base.Nothing @ a }) -}
3ff5dbe3ea07246899a3e27f505de444
  type Coordinates = (GHC.Types.Float, GHC.Types.Float)
6b7d09e1353386b812125bfcdfd50080
  data DimensionalAttributes
    = Sphere Main.Radius | Rectangle Main.Width Main.Height
84e551aa6eb363bfbced78fd1d4e3f2c
  data DisplayableShape
    = DisplayableShape {_visualAttrs :: Main.VisualAttributes,
                        _entityAttrs :: Main.GameEntityAttributes,
                        _dimensionalAttributes :: Main.DimensionalAttributes}
8130e0984cebc0bbef920349424ce391
  data GameEntityAttributes
    = GameEntityAttributes {_velocity :: (GHC.Types.Float,
                                          GHC.Types.Float),
                            _position :: Main.Position,
                            _coords :: Main.Coordinates}
44f19ea42fe517fa4dd9a477abadb3cc
  data GridGame
    = Game {_keysDown :: GHC.Base.String,
            _unprocessed :: Data.Map.Base.Map
                              Main.Coordinates Main.DisplayableShape,
            _frontier :: Data.Map.Base.Map
                           Main.Coordinates Main.DisplayableShape,
            _processed :: Data.Map.Base.Map
                            Main.Coordinates Main.DisplayableShape,
            _wall :: Data.Map.Base.Map Main.Coordinates Main.DisplayableShape,
            _nodesToProcess :: Queue.Queue Main.DisplayableShape,
            _previouslyProcessed :: Main.DisplayableShape,
            _frameNumber :: GHC.Types.Int}
2f73e2100990f43e7f87e2423b9f4f0a
  type Height = GHC.Types.Float
9c18057061b8a47610c39b0a55e86cae
  type Position = (GHC.Types.Float, GHC.Types.Float)
ef599d3631095a025c90fc187752ef36
  type Radius = GHC.Types.Float
6ca2b488f20758f44f464b5a5ac1465d
  data VisualAttributes
    = VisualAttributes {_objectColor :: Graphics.Gloss.Internals.Data.Color.Color,
                        _displayed :: GHC.Types.Bool}
fde86e3cc23700487608fd48bc9c2cd1
  type Width = GHC.Types.Float
0990475499c65e8b04abbe8b6b087ff2
  _coords :: Main.GameEntityAttributes -> Main.Coordinates
  RecSel Left Main.GameEntityAttributes
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.GameEntityAttributes) ->
                 case ds of wild { Main.GameEntityAttributes ds1 ds2 ds3 ->
                 ds3 }) -}
b47ca524407287a41d61d65aebad50e0
  _dimensionalAttributes ::
    Main.DisplayableShape -> Main.DimensionalAttributes
  RecSel Left Main.DisplayableShape
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.DisplayableShape) ->
                 case ds of wild { Main.DisplayableShape ds1 ds2 ds3 -> ds3 }) -}
3f3ec5bc1a8d40e493344a0a8300f6c9
  _displayed :: Main.VisualAttributes -> GHC.Types.Bool
  RecSel Left Main.VisualAttributes
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.VisualAttributes) ->
                 case ds of wild { Main.VisualAttributes ds1 ds2 -> ds2 }) -}
fbd5510bd905dcabec8da366401fb61a
  _entityAttrs :: Main.DisplayableShape -> Main.GameEntityAttributes
  RecSel Left Main.DisplayableShape
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSL),1*U(A,1*U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.DisplayableShape) ->
                 case ds of wild { Main.DisplayableShape ds1 ds2 ds3 -> ds2 }) -}
392b32eb2ef7cad2f508168ab1c7f6a8
  _frameNumber :: Main.GridGame -> GHC.Types.Int
  RecSel Left Main.GridGame
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLS),1*U(A,A,A,A,A,A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.GridGame) ->
                 case ds of wild { Main.Game ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds8 }) -}
89955a8bfdb6bfb6880dceeb0929c1be
  _frontier ::
    Main.GridGame
    -> Data.Map.Base.Map Main.Coordinates Main.DisplayableShape
  RecSel Left Main.GridGame
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLL),1*U(A,A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.GridGame) ->
                 case ds of wild { Main.Game ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds3 }) -}
ac4aae3087a1a6bea9ef028fadd2c4ba
  _keysDown :: Main.GridGame -> GHC.Base.String
  RecSel Left Main.GridGame
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLL),1*U(1*U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.GridGame) ->
                 case ds of wild { Main.Game ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds1 }) -}
eb186ca02c11ff30a166e6c5b091ce4e
  _nodesToProcess ::
    Main.GridGame -> Queue.Queue Main.DisplayableShape
  RecSel Left Main.GridGame
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLL),1*U(A,A,A,A,A,1*U(U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.GridGame) ->
                 case ds of wild { Main.Game ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds6 }) -}
c2fcdea6f2b55b274b2bde8e3b4fa24e
  _objectColor ::
    Main.VisualAttributes -> Graphics.Gloss.Internals.Data.Color.Color
  RecSel Left Main.VisualAttributes
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U(U,U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.VisualAttributes) ->
                 case ds of wild { Main.VisualAttributes ds1 ds2 -> ds1 }) -}
8dd4ddcca3dc06d67e60b95b46255108
  _position :: Main.GameEntityAttributes -> Main.Position
  RecSel Left Main.GameEntityAttributes
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U(U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.GameEntityAttributes) ->
                 case ds of wild { Main.GameEntityAttributes ds1 ds2 ds3 ->
                 ds2 }) -}
5f798d2875612ef42030cc4cf1eec612
  _previouslyProcessed :: Main.GridGame -> Main.DisplayableShape
  RecSel Left Main.GridGame
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSL),1*U(A,A,A,A,A,A,1*U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.GridGame) ->
                 case ds of wild { Main.Game ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds7 }) -}
fac12febcc60c152627a1dc0cf4da4ac
  _processed ::
    Main.GridGame
    -> Data.Map.Base.Map Main.Coordinates Main.DisplayableShape
  RecSel Left Main.GridGame
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLL),1*U(A,A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.GridGame) ->
                 case ds of wild { Main.Game ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds4 }) -}
3c3a69f7195edc99107ec8f396a324be
  _unprocessed ::
    Main.GridGame
    -> Data.Map.Base.Map Main.Coordinates Main.DisplayableShape
  RecSel Left Main.GridGame
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLL),1*U(A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.GridGame) ->
                 case ds of wild { Main.Game ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds2 }) -}
584b370e7203cb5434036cbff962aedf
  _velocity ::
    Main.GameEntityAttributes -> (GHC.Types.Float, GHC.Types.Float)
  RecSel Left Main.GameEntityAttributes
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U(U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.GameEntityAttributes) ->
                 case ds of wild { Main.GameEntityAttributes ds1 ds2 ds3 ->
                 ds1 }) -}
705297c0702d22d14e3a1aa8ca528972
  _visualAttrs :: Main.DisplayableShape -> Main.VisualAttributes
  RecSel Left Main.DisplayableShape
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U(U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.DisplayableShape) ->
                 case ds of wild { Main.DisplayableShape ds1 ds2 ds3 -> ds1 }) -}
b4b32eae00e9c9b7c7183eb1e5188591
  _wall ::
    Main.GridGame
    -> Data.Map.Base.Map Main.Coordinates Main.DisplayableShape
  RecSel Left Main.GridGame
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLL),1*U(A,A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.GridGame) ->
                 case ds of wild { Main.Game ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds5 }) -}
35e882c807afb29e1ad3596264de2c63
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
713219be34389028d6cb93c1e9b75708
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 case Graphics.Gloss.Internals.Interface.Game.playWithBackendIO1
                        @ Main.GridGame
                        @ Graphics.Gloss.Internals.Interface.Backend.GLUT.GLUTState
                        Graphics.Gloss.Internals.Interface.Backend.GLUT.$fBackendGLUTState
                        Graphics.Gloss.Internals.Interface.Backend.GLUT.glutStateInit
                        Graphics.Gloss.Data.Display.FullScreen
                        Main.main_b1
                        Main.main30
                        Main.main6
                        Main.main5
                          `cast`
                        (<Main.GridGame>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Graphics.Gloss.Internals.Data.Picture.Picture>_R))
                        Main.main3
                          `cast`
                        (<Graphics.Gloss.Internals.Interface.Event.Event>_R
                         ->_R <Main.GridGame>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Main.GridGame>_R))
                        Main.main2
                          `cast`
                        (<GHC.Types.Float>_R
                         ->_R <Main.GridGame>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Main.GridGame>_R))
                        GHC.Types.True
                        eta of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
dea7919bc2b68a151abb11a819533648
  main10 :: [Main.DisplayableShape]
  {- Unfolding: (Main.main_go Main.main11) -}
f0933ada32cd52684334587b4392fac3
  main11 :: [GHC.Types.Float]
  {- Unfolding: (GHC.Real.numericEnumFromTo
                   @ GHC.Types.Float
                   GHC.Classes.$fOrdFloat
                   GHC.Float.$fFractionalFloat
                   Main.main12
                   Main.main_numSquares) -}
9eca451f2e456549fca8ed4d5b6eedf5
  main12 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# -30.0#) -}
af662b684f54d1a2ca43d466a79b63b0
  main13 ::
    (GHC.Types.Float, GHC.Types.Float)
    -> Main.DisplayableShape -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ (k :: (GHC.Types.Float, GHC.Types.Float))
                   (ds :: Main.DisplayableShape)[OneShot] ->
                 case k of ww { (,) ww1 ww2 ->
                 case ww1 of wild { GHC.Types.F# x ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqFloat# x 0.0#) of wild1 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww2 of wild2 { GHC.Types.F# x1 ->
                      GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqFloat# x1 0.0#) } } } }) -}
b89f872f76127f490de18da2cac311e4
  main14 :: Queue.Queue Main.DisplayableShape
  {- Unfolding: (Queue.Queue
                   @ Main.DisplayableShape
                   Main.main15
                   (GHC.Types.[] @ Main.DisplayableShape)) -}
0e5966537a513e40db1daa511b42fe31
  main15 :: [Main.DisplayableShape]
  {- Unfolding: (GHC.Types.:
                   @ Main.DisplayableShape
                   Main.main_centerNode
                   (GHC.Types.[] @ Main.DisplayableShape)) -}
9a7003070d84225798eec24a86aab9a5
  main16 :: Data.Map.Base.Map Main.Coordinates Main.DisplayableShape
  {- Unfolding: (case Main.main18 of wild { (,) wall unprocessed ->
                 Data.Map.Base.map
                   @ Main.DisplayableShape
                   @ Main.DisplayableShape
                   @ (GHC.Types.Float, GHC.Types.Float)
                   Main.main17
                   wall }) -}
f21d98899a4c373e338c19e9d721b602
  main17 :: Main.DisplayableShape -> Main.DisplayableShape
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (n :: Main.DisplayableShape) ->
                 case n of wild { Main.DisplayableShape x1 x2 x3 ->
                 Main.DisplayableShape
                   (case x1 of wild1 { Main.VisualAttributes x4 x5 ->
                    Main.VisualAttributes Main.main_b1 x5 })
                   x2
                   x3 }) -}
1dabd6d31d1de1c8e32f4e84344f7f90
  main18 ::
    (Data.Map.Base.Map
       (GHC.Types.Float, GHC.Types.Float) Main.DisplayableShape,
     Data.Map.Base.Map
       (GHC.Types.Float, GHC.Types.Float) Main.DisplayableShape)
  {- Unfolding: (case Main.main8 of wild { (,) center rest ->
                 case Data.Map.Base.$wpoly_go2
                        @ Main.DisplayableShape
                        @ (GHC.Types.Float, GHC.Types.Float)
                        Main.main19
                        rest of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) } }) -}
85e2eb44a3406cbeaecefdf706c2fe9a
  main19 ::
    (GHC.Types.Float, GHC.Types.Float)
    -> Main.DisplayableShape -> GHC.Types.Bool
  {- Arity: 2,
     Unfolding: (\ (k :: (GHC.Types.Float, GHC.Types.Float))
                   (ds :: Main.DisplayableShape)[OneShot] ->
                 GHC.List.elem
                   @ (GHC.Types.Float, GHC.Types.Float)
                   Graphics.Gloss.Internals.Data.Picture.$s$fEq(,)
                   k
                   Main.main_wallNodes) -}
ee83eae49ebfcc2d551f2c6b1866a2b1
  main2 ::
    GHC.Types.Float
    -> Main.GridGame
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.GridGame #)
  {- Arity: 3 -}
f1b0e02ac474d094f1f0f3c7b9cdc5c9
  main20 :: [(GHC.Types.Float, GHC.Types.Float)]
  {- Unfolding: (Main.main_go3 Main.main21) -}
50540a07157231fbb55b8b4b7242d4f4
  main21 :: [GHC.Types.Float]
  {- Unfolding: (GHC.Real.numericEnumFromTo
                   @ GHC.Types.Float
                   GHC.Classes.$fOrdFloat
                   GHC.Float.$fFractionalFloat
                   Main.main23
                   Main.main22) -}
b1cc7e918699e95a982bdb37a2f6411c
  main22 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# 20.0#) -}
05cdf5277b22c4539c4e86b2663ef786
  main23 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# 15.0#) -}
1a9c2c54b3dfc42e6abdb556f48df2e8
  main24 :: [(GHC.Types.Float, GHC.Types.Float)]
  {- Unfolding: (Main.main_go4 Main.main25) -}
ff416309691a2d345d0023c9299d5d17
  main25 :: [GHC.Types.Float]
  {- Unfolding: (GHC.Real.numericEnumFromTo
                   @ GHC.Types.Float
                   GHC.Classes.$fOrdFloat
                   GHC.Float.$fFractionalFloat
                   Main.main27
                   Main.main26) -}
a3b494cb37d71bd2b5d00db8ba82a66f
  main26 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# 10.0#) -}
20859c82a0fa2e8359797f0f2c126b01
  main27 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# -10.0#) -}
c5dbcd04a417de8164d5e0378b2079f2
  main28 :: [(GHC.Types.Float, GHC.Types.Float)]
  {- Unfolding: (Main.main_go5 Main.main25) -}
15ca450fd6b1f5f251d14a4b98ed9db7
  main29 :: Data.Map.Base.Map Main.Coordinates Main.DisplayableShape
  {- Unfolding: (case Main.main18 of wild { (,) wall unprocessed ->
                 unprocessed }) -}
99bb36e182236f6f2a97ee1bfdfa29ff
  main3 ::
    Graphics.Gloss.Internals.Interface.Event.Event
    -> Main.GridGame
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.GridGame #)
  {- Arity: 3,
     Unfolding: (\ (event :: Graphics.Gloss.Internals.Interface.Event.Event)
                   (world1 :: Main.GridGame)[OneShot]
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s,
                    case event of wild {
                      DEFAULT -> world1
                      Graphics.Gloss.Internals.Interface.Event.EventKey ds ds1 ds2 ds3
                      -> case ds of wild1 {
                           DEFAULT -> world1
                           Graphics.Gloss.Internals.Interface.Backend.Types.Char ds4
                           -> case ds4 of wild2 { GHC.Types.C# ds5 ->
                              case ds5 of ds6 {
                                DEFAULT
                                -> case ds1 of wild3 {
                                     Graphics.Gloss.Internals.Interface.Backend.Types.Down
                                     -> case world1 of wild4 { Main.Game ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ->
                                        Main.Game
                                          (GHC.Base.++
                                             @ GHC.Types.Char
                                             ds7
                                             (GHC.Types.:
                                                @ GHC.Types.Char
                                                wild2
                                                (GHC.Types.[] @ GHC.Types.Char)))
                                          ds8
                                          ds9
                                          ds10
                                          ds11
                                          ds12
                                          ds13
                                          ds14 }
                                     Graphics.Gloss.Internals.Interface.Backend.Types.Up
                                     -> case world1 of wild4 { Main.Game ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ->
                                        Main.Game
                                          (letrec {
                                             go :: [GHC.Types.Char] -> [GHC.Types.Char]
                                               {- Arity: 1, Strictness: <S,1*U> -}
                                             = \ (ds15 :: [GHC.Types.Char]) ->
                                               case ds15 of wild5 {
                                                 [] -> GHC.Types.[] @ GHC.Types.Char
                                                 : y ys
                                                 -> case y of wild6 { GHC.Types.C# x ->
                                                    case GHC.Prim.tagToEnum#
                                                           @ GHC.Types.Bool
                                                           (GHC.Prim.eqChar# x ds6) of wild7 {
                                                      GHC.Types.False
                                                      -> GHC.Types.: @ GHC.Types.Char wild6 (go ys)
                                                      GHC.Types.True -> go ys } } }
                                           } in
                                           go ds7)
                                          ds8
                                          ds9
                                          ds10
                                          ds11
                                          ds12
                                          ds13
                                          ds14 } }
                                'q'# -> Main.main4 } } } } #)) -}
9fb3097dcf58b7c49278b57bd6a3c6e1
  main30 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 60#) -}
9641b29539841134ac81aee65b73e898
  main31 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
810ab706673f504b129a755bb37121be
  main4 :: Main.GridGame
  {- Strictness: x -}
88af6ace961f62783b9a20cb52169b75
  main5 ::
    Main.GridGame
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Graphics.Gloss.Internals.Data.Picture.Picture #)
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ (x :: Main.GridGame)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s,
                    Graphics.Gloss.Internals.Data.Picture.Pictures
                      (GHC.Types.:
                         @ Graphics.Gloss.Internals.Data.Picture.Picture
                         (Graphics.Gloss.Internals.Data.Picture.Pictures
                            (case x of wild { Main.Game ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                             Main.main_go1
                               (GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Picture)
                               ds1 }))
                         (GHC.Types.:
                            @ Graphics.Gloss.Internals.Data.Picture.Picture
                            (Graphics.Gloss.Internals.Data.Picture.Pictures
                               (case x of wild { Main.Game ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                                Main.main_go10
                                  (GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Picture)
                                  ds3 }))
                            (GHC.Types.[]
                               @ Graphics.Gloss.Internals.Data.Picture.Picture))) #)) -}
bd943f5b277869de0d284dd3e92bd97f
  main6 :: Main.GridGame
  {- Unfolding: (Main.Game
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.main29
                   Main.main_center
                   (Data.Map.Base.Tip @ Main.Coordinates @ Main.DisplayableShape)
                   Main.main16
                   Main.main14
                   Main.main_centerNode
                   Main.main7) -}
94100dd881f7528fb21b1a085fc83302
  main7 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 0#) -}
efe3afb1c430c2f03ee1b5c535e32829
  main8 ::
    (Data.Map.Base.Map
       (GHC.Types.Float, GHC.Types.Float) Main.DisplayableShape,
     Data.Map.Base.Map
       (GHC.Types.Float, GHC.Types.Float) Main.DisplayableShape)
  {- Unfolding: (case Data.Map.Base.$wpoly_go2
                        @ Main.DisplayableShape
                        @ (GHC.Types.Float, GHC.Types.Float)
                        Main.main13
                        Main.main9 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
490f085d9b273c4710bc1d2185d6b247
  main9 :: Data.Map.Base.Map Main.Coordinates Main.DisplayableShape
  {- Unfolding: (Main.$sfromList
                   @ Main.DisplayableShape
                   (Main.main_go2 Main.main10)) -}
04261aafdd4bd2f050d0278cae63fa2c
  main_$sgo ::
    Main.DisplayableShape
    -> [Main.DisplayableShape]
    -> [(Main.Coordinates, Main.DisplayableShape)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U> -}
5a9f42c20946c0819e8a51c709f10601
  main_$sgo1 ::
    [(GHC.Types.Float, GHC.Types.Float)]
    -> [[(GHC.Types.Float, GHC.Types.Float)]]
    -> [(GHC.Types.Float, GHC.Types.Float)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U> -}
09d4cf993b212b79dfaaa01d3ac5095f
  main_b1 :: Graphics.Gloss.Internals.Data.Color.Color
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Graphics.Gloss.Internals.Data.Color.RGBA
                   0.1#
                   0.1#
                   0.1#
                   1.0#) -}
3d0235abcef8041eb76810a00a627190
  main_center ::
    Data.Map.Base.Map
      (GHC.Types.Float, GHC.Types.Float) Main.DisplayableShape
  {- Unfolding: (case Main.main8 of wild { (,) center rest ->
                 center }) -}
6efc32e2d86541df09eedfce7a54515b
  main_centerNode :: Main.DisplayableShape
  {- Unfolding: (case Main.$slookup_$s$wpoly_go10
                        Main.main_center
                        0.0#
                        0.0# of wild {
                   GHC.Base.Nothing -> Data.Maybe.fromJust1 @ Main.DisplayableShape
                   GHC.Base.Just x -> x }) -}
9180ef8845195b8bf2acc27c6cda09d4
  main_go :: [GHC.Types.Float] -> [Main.DisplayableShape]
  {- Arity: 1, Strictness: <S,1*U> -}
3837789ee4853f9ead11fa8166dd9f23
  main_go1 ::
    [Graphics.Gloss.Internals.Data.Picture.Picture]
    -> Data.Map.Base.Map
         (GHC.Types.Float, GHC.Types.Float) Main.DisplayableShape
    -> [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U> -}
3e0dd02f85dd2e392f3f9258768fd81b
  main_go10 ::
    [Graphics.Gloss.Internals.Data.Picture.Picture]
    -> Data.Map.Base.Map
         (GHC.Types.Float, GHC.Types.Float) Main.DisplayableShape
    -> [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U> -}
7df3190f5e8b877734a82fc991826694
  main_go2 ::
    [Main.DisplayableShape]
    -> [(Main.Coordinates, Main.DisplayableShape)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
85a23160eb428a9636010d64c7454cc2
  main_go3 ::
    [GHC.Types.Float] -> [(GHC.Types.Float, GHC.Types.Float)]
  {- Arity: 1, Strictness: <S,1*U> -}
16f306d010d6de623ab9f3b7e9ffa12b
  main_go4 ::
    [GHC.Types.Float] -> [(GHC.Types.Float, GHC.Types.Float)]
  {- Arity: 1, Strictness: <S,1*U> -}
1801a1c8821f5e08ecdc8929dde0048c
  main_go5 ::
    [GHC.Types.Float] -> [(GHC.Types.Float, GHC.Types.Float)]
  {- Arity: 1, Strictness: <S,1*U> -}
62301320af5533163cf577a641d43785
  main_numSquares :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 30.0#) -}
9c18cb07176bc32361a6f45689725eaf
  main_wallNodes :: [(GHC.Types.Float, GHC.Types.Float)]
  {- Unfolding: (GHC.Base.++
                   @ (GHC.Types.Float, GHC.Types.Float)
                   Main.main28
                   (GHC.Base.++
                      @ (GHC.Types.Float, GHC.Types.Float)
                      Main.main24
                      (Main.main_$sgo1
                         Main.main20
                         (GHC.Types.[] @ [(GHC.Types.Float, GHC.Types.Float)])))) -}
instance GHC.Classes.Eq [Main.DimensionalAttributes]
  = Main.$fEqDimensionalAttributes
instance GHC.Classes.Eq [Main.DisplayableShape]
  = Main.$fEqDisplayableShape
instance GHC.Classes.Eq [Main.GameEntityAttributes]
  = Main.$fEqGameEntityAttributes
instance GHC.Classes.Eq [Main.VisualAttributes]
  = Main.$fEqVisualAttributes
instance GHC.Classes.Ord [Main.DimensionalAttributes]
  = Main.$fOrdDimensionalAttributes
instance GHC.Classes.Ord [Main.DisplayableShape]
  = Main.$fOrdDisplayableShape
instance GHC.Classes.Ord [Main.GameEntityAttributes]
  = Main.$fOrdGameEntityAttributes
instance GHC.Show.Show [Main.DimensionalAttributes]
  = Main.$fShowDimensionalAttributes
instance GHC.Show.Show [Main.DisplayableShape]
  = Main.$fShowDisplayableShape
instance GHC.Show.Show [Main.GameEntityAttributes]
  = Main.$fShowGameEntityAttributes
instance GHC.Show.Show [Main.GridGame] = Main.$fShowGridGame
instance GHC.Show.Show [Main.VisualAttributes]
  = Main.$fShowVisualAttributes
"SC:$w$sgo100" [0] forall @ a1
                          (sc :: Data.Map.Base.Map (GHC.Types.Float, GHC.Types.Float) a1)
                          (sc1 :: a1)
                          (sc2 :: GHC.Types.Float)
                          (sc3 :: GHC.Prim.Float#)
  Main.$w$sgo10 @ a1 (GHC.Types.F# sc3) sc2 sc1 sc
  = Main.$sinsert_$s$w$sgo1 @ a1 sc sc1 sc2 sc3
"SC:$w$sgo101" [0] forall @ a1
                          (sc :: Data.Map.Base.Map (GHC.Types.Float, GHC.Types.Float) a1)
                          (sc1 :: a1)
                          (sc2 :: GHC.Prim.Float#)
                          (sc3 :: GHC.Prim.Float#)
  Main.$w$sgo10 @ a1 (GHC.Types.F# sc3) (GHC.Types.F# sc2) sc1 sc
  = Main.$sinsert_$s$w$sgo10 @ a1 sc sc1 sc2 sc3
"SC:$wpoly_go100" [0] forall (sc :: Data.Map.Base.Map
                                      (GHC.Types.Float, GHC.Types.Float) Main.DisplayableShape)
                             (sc1 :: GHC.Prim.Float#)
                             (sc2 :: GHC.Prim.Float#)
  Main.$wpoly_go10 @ Main.DisplayableShape
                   (GHC.Types.F# sc2)
                   (GHC.Types.F# sc1)
                   sc
  = Main.$slookup_$s$wpoly_go10 sc sc1 sc2
"SC:$wpoly_go101" [0] forall @ a
                             (sc :: Data.Map.Base.Map (GHC.Types.Float, GHC.Types.Float) a)
                             (sc1 :: GHC.Types.Float)
                             (sc2 :: GHC.Prim.Float#)
  Main.$wpoly_go10 @ a (GHC.Types.F# sc2) sc1 sc
  = Main.$slookup_$s$wpoly_go1 @ a sc sc1 sc2
"SC:go0" [ALWAYS] forall (sc :: Main.DisplayableShape)
                         (sc1 :: [Main.DisplayableShape])
  Main.main_go2 (GHC.Types.: @ Main.DisplayableShape sc sc1)
  = Main.main_$sgo sc sc1
"SPEC/Main $fOrd(,) @ Float @ Float" [ALWAYS] forall ($dOrd1 :: GHC.Classes.Ord
                                                                  GHC.Types.Float)
                                                     ($dOrd :: GHC.Classes.Ord GHC.Types.Float)
  GHC.Classes.$fOrd(,) @ GHC.Types.Float
                       @ GHC.Types.Float
                       $dOrd
                       $dOrd1
  = Main.$s$fOrd(,)
"SPEC/Main $fOrd(,)_$cp1Ord @ Float @ Float" [ALWAYS] forall ($dOrd1 :: GHC.Classes.Ord
                                                                          GHC.Types.Float)
                                                             ($dOrd :: GHC.Classes.Ord
                                                                         GHC.Types.Float)
  GHC.Classes.$fOrd(,)_$cp1Ord @ GHC.Types.Float
                               @ GHC.Types.Float
                               $dOrd
                               $dOrd1
  = Main.$s$fOrd(,)_$s$fOrd(,)_$cp1Ord
"SPEC/Main $fShow(,) @ Float @ Float" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                    GHC.Types.Float)
                                                      ($dShow :: GHC.Show.Show GHC.Types.Float)
  GHC.Show.$fShow(,) @ GHC.Types.Float
                     @ GHC.Types.Float
                     $dShow
                     $dShow1
  = Main.$s$fShow(,)
"SPEC/Main $fShow(,)_$cshow @ Float @ Float" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                           GHC.Types.Float)
                                                             ($dShow :: GHC.Show.Show
                                                                          GHC.Types.Float)
  GHC.Show.$fShow(,)_$cshow @ GHC.Types.Float
                            @ GHC.Types.Float
                            $dShow
                            $dShow1
  = Main.$s$fShow(,)_$s$fShow(,)_$cshow
"SPEC/Main $fShow(,)_$cshowList @ Float @ Float" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                               GHC.Types.Float)
                                                                 ($dShow :: GHC.Show.Show
                                                                              GHC.Types.Float)
  GHC.Show.$fShow(,)_$cshowList @ GHC.Types.Float
                                @ GHC.Types.Float
                                $dShow
                                $dShow1
  = Main.$s$fShow(,)_$s$fShow(,)_$cshowList
"SPEC/Main fromList @ Coordinates _" [ALWAYS] forall @ a
                                                     ($dOrd :: GHC.Classes.Ord Main.Coordinates)
  Data.Map.Base.fromList @ (GHC.Types.Float, GHC.Types.Float)
                         @ a
                         $dOrd
  = Main.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

