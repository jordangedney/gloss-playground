
==================== FINAL INTERFACE ====================
2018-09-15 03:53:52.531455268 UTC

interface pong-0.1.0.0-3tJFZ6KnonD3vKuZNuvqbN:Queue 8002
  interface hash: f35cd59294eede5953f04ac69e00cda8
  ABI hash: bdc96373aaa67a2649737cb0b060cce3
  export-list hash: 7689108d302baab1639a17f422d56c43
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: a284987e1cc9ac8d50844f52515f368c
  sig of: Nothing
  used TH splices: False
  where
exports:
  Queue.emptyQueue
  Queue.peek
  Queue.pop
  Queue.popQueue
  Queue.push
  Queue.pushQueue
  Queue.Queue
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity base-4.9.1.0:Data.List.NonEmpty
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Semigroup
                         base-4.9.1.0:Data.Type.Equality base-4.9.1.0:Data.Version
                         base-4.9.1.0:Data.Void base-4.9.1.0:GHC.Exts
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.State 8d226555bc2686d0ea757e495e63698c
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.State.Lazy 371607e50dde46b5f4103b3ab334a497
a2b6b22e6334d6f476bf4b62702f8d15
  $fShowQueue :: GHC.Show.Show a => GHC.Show.Show (Queue.Queue a)
  DFunId
  {- Arity: 1, Strictness: <L,U(A,A,C(U))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (Queue.Queue a)
                  (Queue.$fShowQueue_$cshowsPrec @ a $dShow)
                  (Queue.$fShowQueue_$cshow @ a $dShow)
                  (Queue.$fShowQueue_$cshowList @ a $dShow) -}
9540116c2208453819ef434192cabb51
  $fShowQueue1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
2068ed1d1c0821893c07b0a8465045ea
  $fShowQueue2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
028990a71d9c130aa84318a6f495729d
  $fShowQueue3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "outbox' = "#) -}
06305cfadab1a9018bc44b0bfbb0a56a
  $fShowQueue4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
10c69ad2474d050561320fc95e8d6a75
  $fShowQueue5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "inbox' = "#) -}
0659fd17b5b19530b8ea822268f5cafd
  $fShowQueue6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Queue {"#) -}
a2b6b22e6334d6f476bf4b62702f8d15
  $fShowQueue_$cshow ::
    GHC.Show.Show a => Queue.Queue a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(A,A,C(U))><S,1*U(U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (x :: Queue.Queue a) ->
                 Queue.$fShowQueue_$cshowsPrec
                   @ a
                   $dShow
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a2b6b22e6334d6f476bf4b62702f8d15
  $fShowQueue_$cshowList ::
    GHC.Show.Show a => [Queue.Queue a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(A,A,C(U))><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [Queue.Queue a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Queue.Queue a)
                   (Queue.$fShowQueue_$cshowsPrec @ a $dShow Queue.$fShowQueue1)
                   eta
                   eta1) -}
a2b6b22e6334d6f476bf4b62702f8d15
  $fShowQueue_$cshowsPrec ::
    GHC.Show.Show a => GHC.Types.Int -> Queue.Queue a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(A,A,C(U))><S(S),1*U(U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Queue.Queue a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Queue.Queue ww3 ww4 ->
                 Queue.$w$cshowsPrec @ a w ww1 ww3 ww4 } }) -}
61c711a3c5acf1ef12db8a6e31f0afce
  $tc'Queue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14173134622120320652##
                   15649117504630727870##
                   Queue.$trModule
                   Queue.$tc'Queue1) -}
3ba72d3d69168a9309c39c889746cbdf
  $tc'Queue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Queue"#) -}
496db5eaf41f429ea6b949eda771349f
  $tcQueue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1529117508394497323##
                   5194947646775621408##
                   Queue.$trModule
                   Queue.$trModule1) -}
b3ad8a150dab5f0eea299799b3c9e3c1
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Queue.$trModule2 Queue.$trModule1) -}
2c811b2a7213c3b1fb92ea6222c306be
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Queue"#) -}
3a6b0b55f171208b693485750b2ad5cb
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "pong-0.1.0.0-3tJFZ6KnonD3vKuZNuvqbN"#) -}
191fbb0b3ed879c984e6d03c4f39c72a
  $w$cshowsPrec ::
    GHC.Show.Show a => GHC.Prim.Int# -> [a] -> [a] -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <L,U(A,A,C(U))><S,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: [a])
                   (ww2 :: [a]) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showList @ a w ww1
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showList @ a w ww2
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Queue.$fShowQueue6
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Queue.$fShowQueue5
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                Queue.$fShowQueue4
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Queue.$fShowQueue3
                                   (f1 (GHC.Base.++ @ GHC.Types.Char Queue.$fShowQueue2 x))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
3561c25feeb87e668bbdb6f6c2654b39
  $wpeek :: [a] -> [a] -> (# GHC.Base.Maybe a, Queue.Queue a #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>, Inline: [0] -}
a2b6b22e6334d6f476bf4b62702f8d15
  data Queue a = Queue {inbox' :: [a], outbox' :: [a]}
249b3453c19d01621c76183f5bd3545f
  type QueueState a =
    Control.Monad.Trans.State.Lazy.State (Queue.Queue a) :: * -> *
43904927a412cc8829c48de614900f1c
  emptyQueue :: Queue.Queue a
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (\ @ a ->
                 Queue.Queue @ a (GHC.Types.[] @ a) (GHC.Types.[] @ a)) -}
017da83074429c211a8d8e310a0479f7
  inbox' :: Queue.Queue a -> [a]
  RecSel Left Queue.Queue
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Queue.Queue a) ->
                 case ds of wild { Queue.Queue ds1 ds2 -> ds1 }) -}
4bf91223186e3ba2adc5517d874e16d3
  outbox' :: Queue.Queue a -> [a]
  RecSel Left Queue.Queue
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Queue.Queue a) ->
                 case ds of wild { Queue.Queue ds1 ds2 -> ds2 }) -}
b5dc8967e19cd042b65188bb65eaf191
  peek :: Queue.Queue a -> (GHC.Base.Maybe a, Queue.Queue a)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Queue.Queue a) ->
                 case w of ww { Queue.Queue ww1 ww2 ->
                 case Queue.$wpeek @ a ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (ww4, ww5) } }) -}
8f87a3db02790f3e24d6cf0a65795d77
  pop :: Queue.Queue a -> (GHC.Base.Maybe a, Queue.Queue a)
  {- Arity: 1, Strictness: <S(SS),1*U(U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Queue.Queue a) ->
                 case w of ww { Queue.Queue ww1 ww2 ->
                 case Queue.$wpeek @ a ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 case ww4 of wild {
                   GHC.Base.Nothing -> (GHC.Base.Nothing @ a, Queue.emptyQueue @ a)
                   GHC.Base.Just element
                   -> (GHC.Base.Just @ a element,
                       Queue.Queue
                         @ a
                         (case ww5 of wild1 { Queue.Queue ds ds1 -> ds })
                         (case ww5 of wild1 { Queue.Queue ds ds1 ->
                          case ds1 of wild2 {
                            [] -> GHC.List.scanl2 @ a : ds2 xs -> xs } })) } } }) -}
151fd78691e4bbcbaacf6ef56af2a2f9
  popQueue :: Queue.QueueState a (GHC.Base.Maybe a)
  {- Arity: 1, Strictness: <S(SS),1*U(U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Queue.pop
                  `cast`
                (forall (a :: <*>_N).
                 Trans
                     (<Queue.Queue a>_R
                      ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                    <(GHC.Base.Maybe a, Queue.Queue a)>_R))
                     (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <Queue.Queue a>_N
                               <Data.Functor.Identity.Identity>_R
                               <GHC.Base.Maybe a>_N))) -}
30a0bcdc11b4e629389dcd8efc15b41c
  push :: a -> Queue.Queue a -> Queue.Queue a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (elementToAdd :: a) (ds :: Queue.Queue a) ->
                 case ds of wild { Queue.Queue inbox outbox ->
                 Queue.Queue @ a (GHC.Types.: @ a elementToAdd inbox) outbox }) -}
6b6bc132ffeadfa197ae6ea8fce78ba9
  pushQueue :: a -> Queue.QueueState a ()
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Queue.pushQueue1
                  `cast`
                (forall (a :: <*>_N).
                 <a>_R
                 ->_R Trans
                          (<Queue.Queue a>_R
                           ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                         <((), Queue.Queue a)>_R))
                          (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                    <Queue.Queue a>_N
                                    <Data.Functor.Identity.Identity>_R
                                    <()>_N))) -}
312692252efa87f8bca39bbbbfe8d2bb
  pushQueue1 :: a -> Queue.Queue a -> ((), Queue.Queue a)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (element :: a) (eta :: Queue.Queue a) ->
                 (GHC.Tuple.(),
                  case eta of wild { Queue.Queue inbox outbox ->
                  Queue.Queue @ a (GHC.Types.: @ a element inbox) outbox })) -}
instance [safe] GHC.Show.Show [Queue.Queue] = Queue.$fShowQueue
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

